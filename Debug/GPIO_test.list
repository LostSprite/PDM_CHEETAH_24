
GPIO_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005684  08005684  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005684  08005684  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005684  08005684  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800568c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000005c  080056e8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080056e8  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e51  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ef  00000000  00000000  00030f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00033608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2f  00000000  00000000  000346b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000085e2  00000000  00000000  000353df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000147d3  00000000  00000000  0003d9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009036f  00000000  00000000  00052194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cf8  00000000  00000000  000e2504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e71fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080055dc 	.word	0x080055dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080055dc 	.word	0x080055dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ae:	2afd      	cmp	r2, #253	; 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	; 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	; 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	3c01      	subs	r4, #1
 8000400:	bf28      	it	cs
 8000402:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000406:	d2e9      	bcs.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_frsub>:
 800063c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000640:	e002      	b.n	8000648 <__addsf3>
 8000642:	bf00      	nop

08000644 <__aeabi_fsub>:
 8000644:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000648 <__addsf3>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	bf1f      	itttt	ne
 800064c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000650:	ea92 0f03 	teqne	r2, r3
 8000654:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000658:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800065c:	d06a      	beq.n	8000734 <__addsf3+0xec>
 800065e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000662:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000666:	bfc1      	itttt	gt
 8000668:	18d2      	addgt	r2, r2, r3
 800066a:	4041      	eorgt	r1, r0
 800066c:	4048      	eorgt	r0, r1
 800066e:	4041      	eorgt	r1, r0
 8000670:	bfb8      	it	lt
 8000672:	425b      	neglt	r3, r3
 8000674:	2b19      	cmp	r3, #25
 8000676:	bf88      	it	hi
 8000678:	4770      	bxhi	lr
 800067a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800067e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000682:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000686:	bf18      	it	ne
 8000688:	4240      	negne	r0, r0
 800068a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800068e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000692:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000696:	bf18      	it	ne
 8000698:	4249      	negne	r1, r1
 800069a:	ea92 0f03 	teq	r2, r3
 800069e:	d03f      	beq.n	8000720 <__addsf3+0xd8>
 80006a0:	f1a2 0201 	sub.w	r2, r2, #1
 80006a4:	fa41 fc03 	asr.w	ip, r1, r3
 80006a8:	eb10 000c 	adds.w	r0, r0, ip
 80006ac:	f1c3 0320 	rsb	r3, r3, #32
 80006b0:	fa01 f103 	lsl.w	r1, r1, r3
 80006b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006b8:	d502      	bpl.n	80006c0 <__addsf3+0x78>
 80006ba:	4249      	negs	r1, r1
 80006bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006c4:	d313      	bcc.n	80006ee <__addsf3+0xa6>
 80006c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ca:	d306      	bcc.n	80006da <__addsf3+0x92>
 80006cc:	0840      	lsrs	r0, r0, #1
 80006ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80006d2:	f102 0201 	add.w	r2, r2, #1
 80006d6:	2afe      	cmp	r2, #254	; 0xfe
 80006d8:	d251      	bcs.n	800077e <__addsf3+0x136>
 80006da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006e2:	bf08      	it	eq
 80006e4:	f020 0001 	biceq.w	r0, r0, #1
 80006e8:	ea40 0003 	orr.w	r0, r0, r3
 80006ec:	4770      	bx	lr
 80006ee:	0049      	lsls	r1, r1, #1
 80006f0:	eb40 0000 	adc.w	r0, r0, r0
 80006f4:	3a01      	subs	r2, #1
 80006f6:	bf28      	it	cs
 80006f8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80006fc:	d2ed      	bcs.n	80006da <__addsf3+0x92>
 80006fe:	fab0 fc80 	clz	ip, r0
 8000702:	f1ac 0c08 	sub.w	ip, ip, #8
 8000706:	ebb2 020c 	subs.w	r2, r2, ip
 800070a:	fa00 f00c 	lsl.w	r0, r0, ip
 800070e:	bfaa      	itet	ge
 8000710:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000714:	4252      	neglt	r2, r2
 8000716:	4318      	orrge	r0, r3
 8000718:	bfbc      	itt	lt
 800071a:	40d0      	lsrlt	r0, r2
 800071c:	4318      	orrlt	r0, r3
 800071e:	4770      	bx	lr
 8000720:	f092 0f00 	teq	r2, #0
 8000724:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000728:	bf06      	itte	eq
 800072a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800072e:	3201      	addeq	r2, #1
 8000730:	3b01      	subne	r3, #1
 8000732:	e7b5      	b.n	80006a0 <__addsf3+0x58>
 8000734:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000738:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800073c:	bf18      	it	ne
 800073e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000742:	d021      	beq.n	8000788 <__addsf3+0x140>
 8000744:	ea92 0f03 	teq	r2, r3
 8000748:	d004      	beq.n	8000754 <__addsf3+0x10c>
 800074a:	f092 0f00 	teq	r2, #0
 800074e:	bf08      	it	eq
 8000750:	4608      	moveq	r0, r1
 8000752:	4770      	bx	lr
 8000754:	ea90 0f01 	teq	r0, r1
 8000758:	bf1c      	itt	ne
 800075a:	2000      	movne	r0, #0
 800075c:	4770      	bxne	lr
 800075e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000762:	d104      	bne.n	800076e <__addsf3+0x126>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	bf28      	it	cs
 8000768:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800076c:	4770      	bx	lr
 800076e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000772:	bf3c      	itt	cc
 8000774:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000778:	4770      	bxcc	lr
 800077a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800077e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000782:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000786:	4770      	bx	lr
 8000788:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800078c:	bf16      	itet	ne
 800078e:	4608      	movne	r0, r1
 8000790:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000794:	4601      	movne	r1, r0
 8000796:	0242      	lsls	r2, r0, #9
 8000798:	bf06      	itte	eq
 800079a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800079e:	ea90 0f01 	teqeq	r0, r1
 80007a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007a6:	4770      	bx	lr

080007a8 <__aeabi_ui2f>:
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	e004      	b.n	80007b8 <__aeabi_i2f+0x8>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2f>:
 80007b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007b4:	bf48      	it	mi
 80007b6:	4240      	negmi	r0, r0
 80007b8:	ea5f 0c00 	movs.w	ip, r0
 80007bc:	bf08      	it	eq
 80007be:	4770      	bxeq	lr
 80007c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007c4:	4601      	mov	r1, r0
 80007c6:	f04f 0000 	mov.w	r0, #0
 80007ca:	e01c      	b.n	8000806 <__aeabi_l2f+0x2a>

080007cc <__aeabi_ul2f>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e00a      	b.n	80007f0 <__aeabi_l2f+0x14>
 80007da:	bf00      	nop

080007dc <__aeabi_l2f>:
 80007dc:	ea50 0201 	orrs.w	r2, r0, r1
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007e8:	d502      	bpl.n	80007f0 <__aeabi_l2f+0x14>
 80007ea:	4240      	negs	r0, r0
 80007ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f0:	ea5f 0c01 	movs.w	ip, r1
 80007f4:	bf02      	ittt	eq
 80007f6:	4684      	moveq	ip, r0
 80007f8:	4601      	moveq	r1, r0
 80007fa:	2000      	moveq	r0, #0
 80007fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000800:	bf08      	it	eq
 8000802:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000806:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800080a:	fabc f28c 	clz	r2, ip
 800080e:	3a08      	subs	r2, #8
 8000810:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000814:	db10      	blt.n	8000838 <__aeabi_l2f+0x5c>
 8000816:	fa01 fc02 	lsl.w	ip, r1, r2
 800081a:	4463      	add	r3, ip
 800081c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000820:	f1c2 0220 	rsb	r2, r2, #32
 8000824:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000828:	fa20 f202 	lsr.w	r2, r0, r2
 800082c:	eb43 0002 	adc.w	r0, r3, r2
 8000830:	bf08      	it	eq
 8000832:	f020 0001 	biceq.w	r0, r0, #1
 8000836:	4770      	bx	lr
 8000838:	f102 0220 	add.w	r2, r2, #32
 800083c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000840:	f1c2 0220 	rsb	r2, r2, #32
 8000844:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000848:	fa21 f202 	lsr.w	r2, r1, r2
 800084c:	eb43 0002 	adc.w	r0, r3, r2
 8000850:	bf08      	it	eq
 8000852:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000856:	4770      	bx	lr

08000858 <initEEPROM>:

uint32_t lstTimeEEPROM = 0;

I2C_HandleTypeDef *hi2c;

void initEEPROM(I2C_HandleTypeDef *_hi2c){
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	hi2c =  _hi2c;
 8000860:	4a05      	ldr	r2, [pc, #20]	; (8000878 <initEEPROM+0x20>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6013      	str	r3, [r2, #0]

	lstTimeEEPROM = HAL_GetTick();
 8000866:	f000 fdcb 	bl	8001400 <HAL_GetTick>
 800086a:	4603      	mov	r3, r0
 800086c:	4a03      	ldr	r2, [pc, #12]	; (800087c <initEEPROM+0x24>)
 800086e:	6013      	str	r3, [r2, #0]
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000007c 	.word	0x2000007c
 800087c:	20000078 	.word	0x20000078

08000880 <readEEPROM>:


uint8_t readEEPROM(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint8_t size, uint16_t address){
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af02      	add	r7, sp, #8
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	4611      	mov	r1, r2
 800088c:	461a      	mov	r2, r3
 800088e:	460b      	mov	r3, r1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	4613      	mov	r3, r2
 8000894:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;

	while(HAL_GetTick() - lstTimeEEPROM < 5){};
 8000896:	bf00      	nop
 8000898:	f000 fdb2 	bl	8001400 <HAL_GetTick>
 800089c:	4602      	mov	r2, r0
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <readEEPROM+0x8c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d9f7      	bls.n	8000898 <readEEPROM+0x18>

	uint8_t adr[2];
	adr[0] = address >> 8;
 80008a8:	88bb      	ldrh	r3, [r7, #4]
 80008aa:	0a1b      	lsrs	r3, r3, #8
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	753b      	strb	r3, [r7, #20]
	adr[1] = address &0xFF;
 80008b2:	88bb      	ldrh	r3, [r7, #4]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	757b      	strb	r3, [r7, #21]

	status = HAL_I2C_Master_Transmit(hi2c, ADDRESS_EEPROM, adr, 2,1000);
 80008b8:	21a0      	movs	r1, #160	; 0xa0
 80008ba:	f107 0214 	add.w	r2, r7, #20
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	2302      	movs	r3, #2
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f002 f8ce 	bl	8002a68 <HAL_I2C_Master_Transmit>
 80008cc:	4603      	mov	r3, r0
 80008ce:	75fb      	strb	r3, [r7, #23]
	if(status == HAL_OK){
 80008d0:	7dfb      	ldrb	r3, [r7, #23]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10b      	bne.n	80008ee <readEEPROM+0x6e>
		status = HAL_I2C_Master_Receive(hi2c,  ADDRESS_EEPROM, pData, size,1000);
 80008d6:	21a0      	movs	r1, #160	; 0xa0
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008e0:	9200      	str	r2, [sp, #0]
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	68f8      	ldr	r0, [r7, #12]
 80008e6:	f002 f9bd 	bl	8002c64 <HAL_I2C_Master_Receive>
 80008ea:	4603      	mov	r3, r0
 80008ec:	75fb      	strb	r3, [r7, #23]
	}

	lstTimeEEPROM = HAL_GetTick();
 80008ee:	f000 fd87 	bl	8001400 <HAL_GetTick>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a05      	ldr	r2, [pc, #20]	; (800090c <readEEPROM+0x8c>)
 80008f6:	6013      	str	r3, [r2, #0]
	return status == HAL_OK ? 1 : 0;
 80008f8:	7dfb      	ldrb	r3, [r7, #23]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf0c      	ite	eq
 80008fe:	2301      	moveq	r3, #1
 8000900:	2300      	movne	r3, #0
 8000902:	b2db      	uxtb	r3, r3
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000078 	.word	0x20000078

08000910 <writeEEPROM>:

uint8_t writeEEPROM(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint8_t size, uint16_t address){
 8000910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000914:	b08b      	sub	sp, #44	; 0x2c
 8000916:	af02      	add	r7, sp, #8
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	4611      	mov	r1, r2
 800091e:	461a      	mov	r2, r3
 8000920:	460b      	mov	r3, r1
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	4613      	mov	r3, r2
 8000926:	80bb      	strh	r3, [r7, #4]
 8000928:	466b      	mov	r3, sp
 800092a:	461e      	mov	r6, r3

	HAL_StatusTypeDef status;

	while(HAL_GetTick() - lstTimeEEPROM < 5){};
 800092c:	bf00      	nop
 800092e:	f000 fd67 	bl	8001400 <HAL_GetTick>
 8000932:	4602      	mov	r2, r0
 8000934:	4b33      	ldr	r3, [pc, #204]	; (8000a04 <writeEEPROM+0xf4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b04      	cmp	r3, #4
 800093c:	d9f7      	bls.n	800092e <writeEEPROM+0x1e>

	uint8_t data[size+2];
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	1c99      	adds	r1, r3, #2
 8000942:	1e4b      	subs	r3, r1, #1
 8000944:	61bb      	str	r3, [r7, #24]
 8000946:	460a      	mov	r2, r1
 8000948:	2300      	movs	r3, #0
 800094a:	4690      	mov	r8, r2
 800094c:	4699      	mov	r9, r3
 800094e:	f04f 0200 	mov.w	r2, #0
 8000952:	f04f 0300 	mov.w	r3, #0
 8000956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800095a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800095e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000962:	460a      	mov	r2, r1
 8000964:	2300      	movs	r3, #0
 8000966:	4614      	mov	r4, r2
 8000968:	461d      	mov	r5, r3
 800096a:	f04f 0200 	mov.w	r2, #0
 800096e:	f04f 0300 	mov.w	r3, #0
 8000972:	00eb      	lsls	r3, r5, #3
 8000974:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000978:	00e2      	lsls	r2, r4, #3
 800097a:	460b      	mov	r3, r1
 800097c:	3307      	adds	r3, #7
 800097e:	08db      	lsrs	r3, r3, #3
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	ebad 0d03 	sub.w	sp, sp, r3
 8000986:	ab02      	add	r3, sp, #8
 8000988:	3300      	adds	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
	data[0] = address >> 8;
 800098c:	88bb      	ldrh	r3, [r7, #4]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	b29b      	uxth	r3, r3
 8000992:	b2da      	uxtb	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	701a      	strb	r2, [r3, #0]
	data[1] = address &0xFF;
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	b2da      	uxtb	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	705a      	strb	r2, [r3, #1]

	for(uint8_t i = 0; i < size; i++){
 80009a0:	2300      	movs	r3, #0
 80009a2:	77fb      	strb	r3, [r7, #31]
 80009a4:	e00a      	b.n	80009bc <writeEEPROM+0xac>
		data[i+2] = pData[i];
 80009a6:	7ffb      	ldrb	r3, [r7, #31]
 80009a8:	68ba      	ldr	r2, [r7, #8]
 80009aa:	441a      	add	r2, r3
 80009ac:	7ffb      	ldrb	r3, [r7, #31]
 80009ae:	3302      	adds	r3, #2
 80009b0:	7811      	ldrb	r1, [r2, #0]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < size; i++){
 80009b6:	7ffb      	ldrb	r3, [r7, #31]
 80009b8:	3301      	adds	r3, #1
 80009ba:	77fb      	strb	r3, [r7, #31]
 80009bc:	7ffa      	ldrb	r2, [r7, #31]
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d3f0      	bcc.n	80009a6 <writeEEPROM+0x96>
	}

	status = HAL_I2C_Master_Transmit(hi2c,ADDRESS_EEPROM, data, size+2,1000);
 80009c4:	21a0      	movs	r1, #160	; 0xa0
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	3302      	adds	r3, #2
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	697a      	ldr	r2, [r7, #20]
 80009d6:	68f8      	ldr	r0, [r7, #12]
 80009d8:	f002 f846 	bl	8002a68 <HAL_I2C_Master_Transmit>
 80009dc:	4603      	mov	r3, r0
 80009de:	74fb      	strb	r3, [r7, #19]

	lstTimeEEPROM = HAL_GetTick();
 80009e0:	f000 fd0e 	bl	8001400 <HAL_GetTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <writeEEPROM+0xf4>)
 80009e8:	6013      	str	r3, [r2, #0]

	return status == HAL_OK ? 1 : 0;
 80009ea:	7cfb      	ldrb	r3, [r7, #19]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf0c      	ite	eq
 80009f0:	2301      	moveq	r3, #1
 80009f2:	2300      	movne	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	46b5      	mov	sp, r6

}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3724      	adds	r7, #36	; 0x24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a02:	bf00      	nop
 8000a04:	20000078 	.word	0x20000078

08000a08 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t value [9];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	for(uint8_t index = 0; index < ADC_NUM_CONVERSIONS; index++){
 8000a10:	2300      	movs	r3, #0
 8000a12:	73fb      	strb	r3, [r7, #15]
 8000a14:	e015      	b.n	8000a42 <HAL_ADC_ConvCpltCallback+0x3a>
		potVoltage[index] = ADC_RAW_TO_VOLTAGE *(float) adcData[index];
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fec1 	bl	80007a8 <__aeabi_ui2f>
 8000a26:	4603      	mov	r3, r0
 8000a28:	7bfc      	ldrb	r4, [r7, #15]
 8000a2a:	490b      	ldr	r1, [pc, #44]	; (8000a58 <HAL_ADC_ConvCpltCallback+0x50>)
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fb95 	bl	800015c <__aeabi_fmul>
 8000a32:	4603      	mov	r3, r0
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_ADC_ConvCpltCallback+0x54>)
 8000a38:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(uint8_t index = 0; index < ADC_NUM_CONVERSIONS; index++){
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	73fb      	strb	r3, [r7, #15]
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d9e6      	bls.n	8000a16 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd90      	pop	{r4, r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200001d8 	.word	0x200001d8
 8000a58:	38533406 	.word	0x38533406
 8000a5c:	200001ec 	.word	0x200001ec

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b092      	sub	sp, #72	; 0x48
 8000a64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f000 fc73 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f000 f867 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f000 fa35 	bl	8000edc <MX_GPIO_Init>
  MX_DMA_Init();
 8000a72:	f000 fa15 	bl	8000ea0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a76:	f000 f8b9 	bl	8000bec <MX_ADC1_Init>
  MX_I2C2_Init();
 8000a7a:	f000 f967 	bl	8000d4c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000a7e:	f000 f9e5 	bl	8000e4c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000a82:	f000 f991 	bl	8000da8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000a86:	4825      	ldr	r0, [pc, #148]	; (8000b1c <main+0xbc>)
 8000a88:	f001 f972 	bl	8001d70 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, ADC_NUM_CONVERSIONS);
 8000a8c:	2209      	movs	r2, #9
 8000a8e:	4924      	ldr	r1, [pc, #144]	; (8000b20 <main+0xc0>)
 8000a90:	4822      	ldr	r0, [pc, #136]	; (8000b1c <main+0xbc>)
 8000a92:	f000 fdbb 	bl	800160c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8000a96:	4823      	ldr	r0, [pc, #140]	; (8000b24 <main+0xc4>)
 8000a98:	f003 fca2 	bl	80043e0 <HAL_TIM_Base_Start>

  uint8_t data = 0xFF;
 8000a9c:	23ff      	movs	r3, #255	; 0xff
 8000a9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  initEEPROM(&hi2c2);
 8000aa2:	4821      	ldr	r0, [pc, #132]	; (8000b28 <main+0xc8>)
 8000aa4:	f7ff fed8 	bl	8000858 <initEEPROM>
  writeEEPROM(&hi2c2, &data , 1 , 0x1FFF);
 8000aa8:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000aac:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	481d      	ldr	r0, [pc, #116]	; (8000b28 <main+0xc8>)
 8000ab4:	f7ff ff2c 	bl	8000910 <writeEEPROM>
  data = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  readEEPROM(&hi2c2, &data , 1 , 0x1FFF);
 8000abe:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000ac2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4817      	ldr	r0, [pc, #92]	; (8000b28 <main+0xc8>)
 8000aca:	f7ff fed9 	bl	8000880 <readEEPROM>

  char d[5];
  snprintf(d, sizeof(d), "%04d\n", data);
 8000ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ad2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000ad6:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <main+0xcc>)
 8000ad8:	2105      	movs	r1, #5
 8000ada:	f004 f8b9 	bl	8004c50 <sniprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_Delay(1000);
 8000ade:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae2:	f000 fc97 	bl	8001414 <HAL_Delay>

    // Example of transmitting ADC data over UART
    char msg[50];
    snprintf(msg, sizeof(msg), "ADC Voltage: %f\n", potVoltage[0]); // Adjust index as needed
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <main+0xd0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fd4e 	bl	800058c <__aeabi_f2d>
 8000af0:	4602      	mov	r2, r0
 8000af2:	460b      	mov	r3, r1
 8000af4:	1d38      	adds	r0, r7, #4
 8000af6:	e9cd 2300 	strd	r2, r3, [sp]
 8000afa:	4a0e      	ldr	r2, [pc, #56]	; (8000b34 <main+0xd4>)
 8000afc:	2132      	movs	r1, #50	; 0x32
 8000afe:	f004 f8a7 	bl	8004c50 <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fb21 	bl	800014c <strlen>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	1d39      	adds	r1, r7, #4
 8000b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <main+0xd8>)
 8000b16:	f003 ff1b 	bl	8004950 <HAL_UART_Transmit>
  {
 8000b1a:	e7e0      	b.n	8000ade <main+0x7e>
 8000b1c:	20000080 	.word	0x20000080
 8000b20:	200001d8 	.word	0x200001d8
 8000b24:	20000148 	.word	0x20000148
 8000b28:	200000f4 	.word	0x200000f4
 8000b2c:	080055f4 	.word	0x080055f4
 8000b30:	200001ec 	.word	0x200001ec
 8000b34:	080055fc 	.word	0x080055fc
 8000b38:	20000190 	.word	0x20000190

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	; 0x50
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b46:	2228      	movs	r2, #40	; 0x28
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 f8b4 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b74:	2310      	movs	r3, #16
 8000b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b80:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fe5c 	bl	8003848 <HAL_RCC_OscConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b96:	f000 f9d5 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b9a:	230f      	movs	r3, #15
 8000b9c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000baa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f003 f8c8 	bl	8003d4c <HAL_RCC_ClockConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000bc2:	f000 f9bf 	bl	8000f44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000bca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fa48 	bl	8004068 <HAL_RCCEx_PeriphCLKConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000bde:	f000 f9b1 	bl	8000f44 <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	; 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]

  hadc1.Instance = ADC1;
 8000bfc:	4b51      	ldr	r3, [pc, #324]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000bfe:	4a52      	ldr	r2, [pc, #328]	; (8000d48 <MX_ADC1_Init+0x15c>)
 8000c00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c02:	4b50      	ldr	r3, [pc, #320]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c0a:	4b4e      	ldr	r3, [pc, #312]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c10:	4b4c      	ldr	r3, [pc, #304]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c16:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000c18:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c1e:	4b49      	ldr	r3, [pc, #292]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 9;
 8000c24:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000c26:	2209      	movs	r2, #9
 8000c28:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2a:	4846      	ldr	r0, [pc, #280]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000c2c:	f000 fc16 	bl	800145c <HAL_ADC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c36:	f000 f985 	bl	8000f44 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c42:	2307      	movs	r3, #7
 8000c44:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	483e      	ldr	r0, [pc, #248]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000c4c:	f000 fe96 	bl	800197c <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c56:	f000 f975 	bl	8000f44 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	4619      	mov	r1, r3
 8000c66:	4837      	ldr	r0, [pc, #220]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000c68:	f000 fe88 	bl	800197c <HAL_ADC_ConfigChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c72:	f000 f967 	bl	8000f44 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4830      	ldr	r0, [pc, #192]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000c84:	f000 fe7a 	bl	800197c <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c8e:	f000 f959 	bl	8000f44 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_3;
 8000c92:	2303      	movs	r3, #3
 8000c94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c96:	2304      	movs	r3, #4
 8000c98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4829      	ldr	r0, [pc, #164]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000ca0:	f000 fe6c 	bl	800197c <HAL_ADC_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000caa:	f000 f94b 	bl	8000f44 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_4;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000cb2:	2305      	movs	r3, #5
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4822      	ldr	r0, [pc, #136]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000cbc:	f000 fe5e 	bl	800197c <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000cc6:	f000 f93d 	bl	8000f44 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_5;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481b      	ldr	r0, [pc, #108]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000cd8:	f000 fe50 	bl	800197c <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000ce2:	f000 f92f 	bl	8000f44 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_6;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000cea:	2307      	movs	r3, #7
 8000cec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000cf4:	f000 fe42 	bl	800197c <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000cfe:	f000 f921 	bl	8000f44 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_7;
 8000d02:	2307      	movs	r3, #7
 8000d04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d06:	2308      	movs	r3, #8
 8000d08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000d10:	f000 fe34 	bl	800197c <HAL_ADC_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000d1a:	f000 f913 	bl	8000f44 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_8;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000d22:	2309      	movs	r3, #9
 8000d24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_ADC1_Init+0x158>)
 8000d2c:	f000 fe26 	bl	800197c <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000d36:	f000 f905 	bl	8000f44 <Error_Handler>
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000080 	.word	0x20000080
 8000d48:	40012400 	.word	0x40012400

08000d4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_I2C2_Init+0x50>)
 8000d52:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <MX_I2C2_Init+0x54>)
 8000d54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_I2C2_Init+0x50>)
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <MX_I2C2_Init+0x58>)
 8000d5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_I2C2_Init+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_I2C2_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_I2C2_Init+0x50>)
 8000d6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_I2C2_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_I2C2_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_I2C2_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_I2C2_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_I2C2_Init+0x50>)
 8000d8a:	f001 fd29 	bl	80027e0 <HAL_I2C_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d94:	f000 f8d6 	bl	8000f44 <Error_Handler>
  }

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000f4 	.word	0x200000f4
 8000da0:	40005800 	.word	0x40005800
 8000da4:	00061a80 	.word	0x00061a80

08000da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000dc6:	4a20      	ldr	r2, [pc, #128]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64000;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000dcc:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8000dd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df2:	4814      	ldr	r0, [pc, #80]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000df4:	f003 faa4 	bl	8004340 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000dfe:	f000 f8a1 	bl	8000f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480d      	ldr	r0, [pc, #52]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000e10:	f003 fb30 	bl	8004474 <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e1a:	f000 f893 	bl	8000f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e1e:	2320      	movs	r3, #32
 8000e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_TIM1_Init+0x9c>)
 8000e2c:	f003 fce2 	bl	80047f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000e36:	f000 f885 	bl	8000f44 <Error_Handler>
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000148 	.word	0x20000148
 8000e48:	40012c00 	.word	0x40012c00

08000e4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <MX_USART1_UART_Init+0x50>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART1_UART_Init+0x4c>)
 8000e84:	f003 fd14 	bl	80048b0 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e8e:	f000 f859 	bl	8000f44 <Error_Handler>
  }

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000190 	.word	0x20000190
 8000e9c:	40013800 	.word	0x40013800

08000ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_DMA_Init+0x38>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <MX_DMA_Init+0x38>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6153      	str	r3, [r2, #20]
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_DMA_Init+0x38>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	200b      	movs	r0, #11
 8000ec4:	f001 f8e3 	bl	800208e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ec8:	200b      	movs	r0, #11
 8000eca:	f001 f8fc 	bl	80020c6 <HAL_NVIC_EnableIRQ>

}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_GPIO_Init+0x60>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <MX_GPIO_Init+0x60>)
 8000ef6:	f043 0320 	orr.w	r3, r3, #32
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_GPIO_Init+0x60>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0320 	and.w	r3, r3, #32
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_GPIO_Init+0x60>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <MX_GPIO_Init+0x60>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_GPIO_Init+0x60>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f24:	2303      	movs	r3, #3
 8000f26:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4804      	ldr	r0, [pc, #16]	; (8000f40 <MX_GPIO_Init+0x64>)
 8000f30:	f001 fad2 	bl	80024d8 <HAL_GPIO_Init>

}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40010800 	.word	0x40010800

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x4>
	...

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6193      	str	r3, [r2, #24]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f74:	61d3      	str	r3, [r2, #28]
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <HAL_MspInit+0x5c>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_MspInit+0x60>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4a04      	ldr	r2, [pc, #16]	; (8000fac <HAL_MspInit+0x60>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000

08000fb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0318 	add.w	r3, r7, #24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a37      	ldr	r2, [pc, #220]	; (80010a8 <HAL_ADC_MspInit+0xf8>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d167      	bne.n	80010a0 <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <HAL_ADC_MspInit+0xfc>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a35      	ldr	r2, [pc, #212]	; (80010ac <HAL_ADC_MspInit+0xfc>)
 8000fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <HAL_ADC_MspInit+0xfc>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b30      	ldr	r3, [pc, #192]	; (80010ac <HAL_ADC_MspInit+0xfc>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <HAL_ADC_MspInit+0xfc>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <HAL_ADC_MspInit+0xfc>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <HAL_ADC_MspInit+0xfc>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a29      	ldr	r2, [pc, #164]	; (80010ac <HAL_ADC_MspInit+0xfc>)
 8001006:	f043 0308 	orr.w	r3, r3, #8
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <HAL_ADC_MspInit+0xfc>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0308 	and.w	r3, r3, #8
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = V_FAN_Pin|C_FAN_Pin|V_ECU_Pin|C_ECU_Pin
 8001018:	23ff      	movs	r3, #255	; 0xff
 800101a:	61bb      	str	r3, [r7, #24]
                          |C_FP_Pin|V_FP_Pin|C_BOB_Pin|C_INJ_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101c:	2303      	movs	r3, #3
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	4619      	mov	r1, r3
 8001026:	4822      	ldr	r0, [pc, #136]	; (80010b0 <HAL_ADC_MspInit+0x100>)
 8001028:	f001 fa56 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_INJ_Pin;
 800102c:	2301      	movs	r3, #1
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001030:	2303      	movs	r3, #3
 8001032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(V_INJ_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0318 	add.w	r3, r7, #24
 8001038:	4619      	mov	r1, r3
 800103a:	481e      	ldr	r0, [pc, #120]	; (80010b4 <HAL_ADC_MspInit+0x104>)
 800103c:	f001 fa4c 	bl	80024d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 8001044:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8001054:	2280      	movs	r2, #128	; 0x80
 8001056:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 800105a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001060:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8001062:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001066:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 800106a:	2220      	movs	r2, #32
 800106c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8001070:	2200      	movs	r2, #0
 8001072:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001074:	4810      	ldr	r0, [pc, #64]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8001076:	f001 f841 	bl	80020fc <HAL_DMA_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001080:	f7ff ff60 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a0c      	ldr	r2, [pc, #48]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8001088:	621a      	str	r2, [r3, #32]
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2012      	movs	r0, #18
 8001096:	f000 fffa 	bl	800208e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800109a:	2012      	movs	r0, #18
 800109c:	f001 f813 	bl	80020c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40012400 	.word	0x40012400
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800
 80010b4:	40010c00 	.word	0x40010c00
 80010b8:	200000b0 	.word	0x200000b0
 80010bc:	40020008 	.word	0x40020008

080010c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a16      	ldr	r2, [pc, #88]	; (8001134 <HAL_I2C_MspInit+0x74>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d124      	bne.n	800112a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_I2C_MspInit+0x78>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <HAL_I2C_MspInit+0x78>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_I2C_MspInit+0x78>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fe:	2312      	movs	r3, #18
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <HAL_I2C_MspInit+0x7c>)
 800110e:	f001 f9e3 	bl	80024d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_I2C_MspInit+0x78>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_I2C_MspInit+0x78>)
 8001118:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_I2C_MspInit+0x78>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40005800 	.word	0x40005800
 8001138:	40021000 	.word	0x40021000
 800113c:	40010c00 	.word	0x40010c00

08001140 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <HAL_TIM_Base_MspInit+0x34>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d10b      	bne.n	800116a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_TIM_Base_MspInit+0x38>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <HAL_TIM_Base_MspInit+0x38>)
 8001158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_TIM_Base_MspInit+0x38>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40012c00 	.word	0x40012c00
 8001178:	40021000 	.word	0x40021000

0800117c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <HAL_UART_MspInit+0x8c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d131      	bne.n	8001200 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_UART_MspInit+0x90>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a1a      	ldr	r2, [pc, #104]	; (800120c <HAL_UART_MspInit+0x90>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_UART_MspInit+0x90>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x90>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_UART_MspInit+0x90>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_UART_MspInit+0x90>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <HAL_UART_MspInit+0x94>)
 80011e2:	f001 f979 	bl	80024d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_UART_MspInit+0x94>)
 80011fc:	f001 f96c 	bl	80024d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000
 8001210:	40010800 	.word	0x40010800

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125a:	f000 f8bf 	bl	80013dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA1_Channel1_IRQHandler+0x10>)
 800126a:	f001 f801 	bl	8002270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200000b0 	.word	0x200000b0

08001278 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <ADC1_2_IRQHandler+0x10>)
 800127e:	f000 faa3 	bl	80017c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000080 	.word	0x20000080

0800128c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001294:	4a14      	ldr	r2, [pc, #80]	; (80012e8 <_sbrk+0x5c>)
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <_sbrk+0x60>)
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d102      	bne.n	80012ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <_sbrk+0x64>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <_sbrk+0x68>)
 80012ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d207      	bcs.n	80012cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012bc:	f003 fd04 	bl	8004cc8 <__errno>
 80012c0:	4603      	mov	r3, r0
 80012c2:	220c      	movs	r2, #12
 80012c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	e009      	b.n	80012e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <_sbrk+0x64>)
 80012dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20005000 	.word	0x20005000
 80012ec:	00000400 	.word	0x00000400
 80012f0:	20000210 	.word	0x20000210
 80012f4:	20000360 	.word	0x20000360

080012f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff fff8 	bl	80012f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800130a:	490c      	ldr	r1, [pc, #48]	; (800133c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <LoopFillZerobss+0x16>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001320:	4c09      	ldr	r4, [pc, #36]	; (8001348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f003 fcd1 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fb95 	bl	8000a60 <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001340:	0800568c 	.word	0x0800568c
  ldr r2, =_sbss
 8001344:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001348:	20000360 	.word	0x20000360

0800134c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <CAN1_RX1_IRQHandler>
	...

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_Init+0x28>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_Init+0x28>)
 800135a:	f043 0310 	orr.w	r3, r3, #16
 800135e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 fe89 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001366:	200f      	movs	r0, #15
 8001368:	f000 f808 	bl	800137c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136c:	f7ff fdee 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x54>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x58>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	fbb3 f3f1 	udiv	r3, r3, r1
 8001396:	fbb2 f3f3 	udiv	r3, r2, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fea1 	bl	80020e2 <HAL_SYSTICK_Config>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00e      	b.n	80013c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0f      	cmp	r3, #15
 80013ae:	d80a      	bhi.n	80013c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b0:	2200      	movs	r2, #0
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f000 fe69 	bl	800208e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_InitTick+0x5c>)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e000      	b.n	80013c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000000 	.word	0x20000000
 80013d4:	20000008 	.word	0x20000008
 80013d8:	20000004 	.word	0x20000004

080013dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x1c>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x20>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a03      	ldr	r2, [pc, #12]	; (80013fc <HAL_IncTick+0x20>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000214 	.word	0x20000214

08001400 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <HAL_GetTick+0x10>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000214 	.word	0x20000214

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff fff0 	bl	8001400 <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffe0 	bl	8001400 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008

0800145c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e0be      	b.n	80015fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	2b00      	cmp	r3, #0
 800148a:	d109      	bne.n	80014a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fd88 	bl	8000fb0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fbbd 	bl	8001c20 <ADC_ConversionStop_Disable>
 80014a6:	4603      	mov	r3, r0
 80014a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f040 8099 	bne.w	80015ea <HAL_ADC_Init+0x18e>
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f040 8095 	bne.w	80015ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014c8:	f023 0302 	bic.w	r3, r3, #2
 80014cc:	f043 0202 	orr.w	r2, r3, #2
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	7b1b      	ldrb	r3, [r3, #12]
 80014e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f4:	d003      	beq.n	80014fe <HAL_ADC_Init+0xa2>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d102      	bne.n	8001504 <HAL_ADC_Init+0xa8>
 80014fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001502:	e000      	b.n	8001506 <HAL_ADC_Init+0xaa>
 8001504:	2300      	movs	r3, #0
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7d1b      	ldrb	r3, [r3, #20]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d119      	bne.n	8001548 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7b1b      	ldrb	r3, [r3, #12]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	3b01      	subs	r3, #1
 8001522:	035a      	lsls	r2, r3, #13
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	e00b      	b.n	8001548 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001534:	f043 0220 	orr.w	r2, r3, #32
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	430a      	orrs	r2, r1
 800155a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	4b28      	ldr	r3, [pc, #160]	; (8001604 <HAL_ADC_Init+0x1a8>)
 8001564:	4013      	ands	r3, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	430b      	orrs	r3, r1
 800156e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001578:	d003      	beq.n	8001582 <HAL_ADC_Init+0x126>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d104      	bne.n	800158c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	3b01      	subs	r3, #1
 8001588:	051b      	lsls	r3, r3, #20
 800158a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	430a      	orrs	r2, r1
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_ADC_Init+0x1ac>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d10b      	bne.n	80015c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	f023 0303 	bic.w	r3, r3, #3
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015c6:	e018      	b.n	80015fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f023 0312 	bic.w	r3, r3, #18
 80015d0:	f043 0210 	orr.w	r2, r3, #16
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015e8:	e007      	b.n	80015fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	f043 0210 	orr.w	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	ffe1f7fd 	.word	0xffe1f7fd
 8001608:	ff1f0efe 	.word	0xff1f0efe

0800160c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a64      	ldr	r2, [pc, #400]	; (80017b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d004      	beq.n	8001630 <HAL_ADC_Start_DMA+0x24>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a63      	ldr	r2, [pc, #396]	; (80017b8 <HAL_ADC_Start_DMA+0x1ac>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d106      	bne.n	800163e <HAL_ADC_Start_DMA+0x32>
 8001630:	4b60      	ldr	r3, [pc, #384]	; (80017b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001638:	2b00      	cmp	r3, #0
 800163a:	f040 80b3 	bne.w	80017a4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_ADC_Start_DMA+0x40>
 8001648:	2302      	movs	r3, #2
 800164a:	e0ae      	b.n	80017aa <HAL_ADC_Start_DMA+0x19e>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 fa89 	bl	8001b6c <ADC_Enable>
 800165a:	4603      	mov	r3, r0
 800165c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800165e:	7dfb      	ldrb	r3, [r7, #23]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f040 809a 	bne.w	800179a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a4e      	ldr	r2, [pc, #312]	; (80017b8 <HAL_ADC_Start_DMA+0x1ac>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d105      	bne.n	8001690 <HAL_ADC_Start_DMA+0x84>
 8001684:	4b4b      	ldr	r3, [pc, #300]	; (80017b4 <HAL_ADC_Start_DMA+0x1a8>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d115      	bne.n	80016bc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d026      	beq.n	80016f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ba:	e01d      	b.n	80016f8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <HAL_ADC_Start_DMA+0x1a8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d004      	beq.n	80016dc <HAL_ADC_Start_DMA+0xd0>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a38      	ldr	r2, [pc, #224]	; (80017b8 <HAL_ADC_Start_DMA+0x1ac>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d10d      	bne.n	80016f8 <HAL_ADC_Start_DMA+0xec>
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <HAL_ADC_Start_DMA+0x1a8>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001708:	f023 0206 	bic.w	r2, r3, #6
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001710:	e002      	b.n	8001718 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4a25      	ldr	r2, [pc, #148]	; (80017bc <HAL_ADC_Start_DMA+0x1b0>)
 8001726:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a24      	ldr	r2, [pc, #144]	; (80017c0 <HAL_ADC_Start_DMA+0x1b4>)
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <HAL_ADC_Start_DMA+0x1b8>)
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0202 	mvn.w	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001750:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6a18      	ldr	r0, [r3, #32]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	334c      	adds	r3, #76	; 0x4c
 800175c:	4619      	mov	r1, r3
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f000 fd25 	bl	80021b0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001770:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001774:	d108      	bne.n	8001788 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001784:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001786:	e00f      	b.n	80017a8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001796:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001798:	e006      	b.n	80017a8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80017a2:	e001      	b.n	80017a8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40012400 	.word	0x40012400
 80017b8:	40012800 	.word	0x40012800
 80017bc:	08001ca3 	.word	0x08001ca3
 80017c0:	08001d1f 	.word	0x08001d1f
 80017c4:	08001d3b 	.word	0x08001d3b

080017c8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f003 0320 	and.w	r3, r3, #32
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d03e      	beq.n	8001868 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d039      	beq.n	8001868 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001816:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800181a:	d11d      	bne.n	8001858 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001820:	2b00      	cmp	r3, #0
 8001822:	d119      	bne.n	8001858 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0220 	bic.w	r2, r2, #32
 8001832:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d105      	bne.n	8001858 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	f043 0201 	orr.w	r2, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff f8d5 	bl	8000a08 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f06f 0212 	mvn.w	r2, #18
 8001866:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186e:	2b00      	cmp	r3, #0
 8001870:	d04d      	beq.n	800190e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d048      	beq.n	800190e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800189e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80018a2:	d012      	beq.n	80018ca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d125      	bne.n	80018fe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80018bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018c0:	d11d      	bne.n	80018fe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d119      	bne.n	80018fe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d105      	bne.n	80018fe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	f043 0201 	orr.w	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 fae4 	bl	8001ecc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f06f 020c 	mvn.w	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001914:	2b00      	cmp	r3, #0
 8001916:	d012      	beq.n	800193e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00d      	beq.n	800193e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f812 	bl	8001958 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0201 	mvn.w	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr

0800196a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_ADC_ConfigChannel+0x20>
 8001998:	2302      	movs	r3, #2
 800199a:	e0dc      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x1da>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b06      	cmp	r3, #6
 80019aa:	d81c      	bhi.n	80019e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3b05      	subs	r3, #5
 80019be:	221f      	movs	r2, #31
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4019      	ands	r1, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	3b05      	subs	r3, #5
 80019d8:	fa00 f203 	lsl.w	r2, r0, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34
 80019e4:	e03c      	b.n	8001a60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b0c      	cmp	r3, #12
 80019ec:	d81c      	bhi.n	8001a28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b23      	subs	r3, #35	; 0x23
 8001a00:	221f      	movs	r2, #31
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4019      	ands	r1, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	3b23      	subs	r3, #35	; 0x23
 8001a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
 8001a26:	e01b      	b.n	8001a60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4613      	mov	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	3b41      	subs	r3, #65	; 0x41
 8001a3a:	221f      	movs	r2, #31
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4019      	ands	r1, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b41      	subs	r3, #65	; 0x41
 8001a54:	fa00 f203 	lsl.w	r2, r0, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b09      	cmp	r3, #9
 8001a66:	d91c      	bls.n	8001aa2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68d9      	ldr	r1, [r3, #12]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	3b1e      	subs	r3, #30
 8001a7a:	2207      	movs	r2, #7
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4019      	ands	r1, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6898      	ldr	r0, [r3, #8]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	3b1e      	subs	r3, #30
 8001a94:	fa00 f203 	lsl.w	r2, r0, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	60da      	str	r2, [r3, #12]
 8001aa0:	e019      	b.n	8001ad6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6919      	ldr	r1, [r3, #16]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	2207      	movs	r2, #7
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	4019      	ands	r1, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6898      	ldr	r0, [r3, #8]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	fa00 f203 	lsl.w	r2, r0, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d003      	beq.n	8001ae6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ae2:	2b11      	cmp	r3, #17
 8001ae4:	d132      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_ADC_ConfigChannel+0x1e4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d125      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d126      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b0c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d11a      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <HAL_ADC_ConfigChannel+0x1ec>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	0c9a      	lsrs	r2, r3, #18
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b2c:	e002      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f9      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x1b2>
 8001b3a:	e007      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	40012400 	.word	0x40012400
 8001b64:	20000000 	.word	0x20000000
 8001b68:	431bde83 	.word	0x431bde83

08001b6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d040      	beq.n	8001c0c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <ADC_Enable+0xac>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <ADC_Enable+0xb0>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	0c9b      	lsrs	r3, r3, #18
 8001ba6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ba8:	e002      	b.n	8001bb0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f9      	bne.n	8001baa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bb6:	f7ff fc23 	bl	8001400 <HAL_GetTick>
 8001bba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bbc:	e01f      	b.n	8001bfe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001bbe:	f7ff fc1f 	bl	8001400 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d918      	bls.n	8001bfe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d011      	beq.n	8001bfe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	f043 0210 	orr.w	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e007      	b.n	8001c0e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d1d8      	bne.n	8001bbe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	431bde83 	.word	0x431bde83

08001c20 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d12e      	bne.n	8001c98 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c4a:	f7ff fbd9 	bl	8001400 <HAL_GetTick>
 8001c4e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c50:	e01b      	b.n	8001c8a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c52:	f7ff fbd5 	bl	8001400 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d914      	bls.n	8001c8a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d10d      	bne.n	8001c8a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e007      	b.n	8001c9a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d0dc      	beq.n	8001c52 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d127      	bne.n	8001d0c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cd6:	d115      	bne.n	8001d04 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d111      	bne.n	8001d04 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7fe fe7f 	bl	8000a08 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d0a:	e004      	b.n	8001d16 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f7ff fe0a 	bl	8001946 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	f043 0204 	orr.w	r2, r3, #4
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f7ff fe02 	bl	800196a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_ADCEx_Calibration_Start+0x1e>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e097      	b.n	8001ebe <HAL_ADCEx_Calibration_Start+0x14e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff42 	bl	8001c20 <ADC_ConversionStop_Disable>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fee3 	bl	8001b6c <ADC_Enable>
 8001da6:	4603      	mov	r3, r0
 8001da8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f040 8081 	bne.w	8001eb4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001dba:	f023 0302 	bic.w	r3, r3, #2
 8001dbe:	f043 0202 	orr.w	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001dc6:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_ADCEx_Calibration_Start+0x158>)
 8001dc8:	681c      	ldr	r4, [r3, #0]
 8001dca:	2002      	movs	r0, #2
 8001dcc:	f002 fa02 	bl	80041d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001dd6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001dd8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001dda:	e002      	b.n	8001de2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f9      	bne.n	8001ddc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0208 	orr.w	r2, r2, #8
 8001df6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001df8:	f7ff fb02 	bl	8001400 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001dfe:	e01b      	b.n	8001e38 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e00:	f7ff fafe 	bl	8001400 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b0a      	cmp	r3, #10
 8001e0c:	d914      	bls.n	8001e38 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00d      	beq.n	8001e38 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	f023 0312 	bic.w	r3, r3, #18
 8001e24:	f043 0210 	orr.w	r2, r3, #16
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e042      	b.n	8001ebe <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1dc      	bne.n	8001e00 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0204 	orr.w	r2, r2, #4
 8001e54:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001e56:	f7ff fad3 	bl	8001400 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e5c:	e01b      	b.n	8001e96 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001e5e:	f7ff facf 	bl	8001400 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b0a      	cmp	r3, #10
 8001e6a:	d914      	bls.n	8001e96 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00d      	beq.n	8001e96 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	f023 0312 	bic.w	r3, r3, #18
 8001e82:	f043 0210 	orr.w	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e013      	b.n	8001ebe <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1dc      	bne.n	8001e5e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	f023 0303 	bic.w	r3, r3, #3
 8001eac:	f043 0201 	orr.w	r2, r3, #1
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	371c      	adds	r7, #28
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
	...

08001ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001efc:	4013      	ands	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f12:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <__NVIC_SetPriorityGrouping+0x44>)
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	60d3      	str	r3, [r2, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <__NVIC_GetPriorityGrouping+0x18>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	f003 0307 	and.w	r3, r3, #7
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	db0b      	blt.n	8001f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 021f 	and.w	r2, r3, #31
 8001f5c:	4906      	ldr	r1, [pc, #24]	; (8001f78 <__NVIC_EnableIRQ+0x34>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2001      	movs	r0, #1
 8001f66:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204a:	4a0a      	ldr	r2, [pc, #40]	; (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f7ff ff90 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff2d 	bl	8001ee0 <__NVIC_SetPriorityGrouping>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff42 	bl	8001f28 <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff90 	bl	8001fd0 <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5f 	bl	8001f7c <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff35 	bl	8001f44 <__NVIC_EnableIRQ>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ffa2 	bl	8002034 <SysTick_Config>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e043      	b.n	800219a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_DMA_Init+0xa8>)
 800211a:	4413      	add	r3, r2
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_DMA_Init+0xac>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	009a      	lsls	r2, r3, #2
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_DMA_Init+0xb0>)
 800212e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002146:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800214a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4313      	orrs	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	bffdfff8 	.word	0xbffdfff8
 80021a8:	cccccccd 	.word	0xcccccccd
 80021ac:	40020000 	.word	0x40020000

080021b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_DMA_Start_IT+0x20>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e04b      	b.n	8002268 <HAL_DMA_Start_IT+0xb8>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d13a      	bne.n	800225a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0201 	bic.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68b9      	ldr	r1, [r7, #8]
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f937 	bl	800247c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 020e 	orr.w	r2, r2, #14
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e00f      	b.n	8002248 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0204 	bic.w	r2, r2, #4
 8002236:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 020a 	orr.w	r2, r2, #10
 8002246:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e005      	b.n	8002266 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002262:	2302      	movs	r3, #2
 8002264:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002266:	7dfb      	ldrb	r3, [r7, #23]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	2204      	movs	r2, #4
 800228e:	409a      	lsls	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d04f      	beq.n	8002338 <HAL_DMA_IRQHandler+0xc8>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d04a      	beq.n	8002338 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d107      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0204 	bic.w	r2, r2, #4
 80022be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a66      	ldr	r2, [pc, #408]	; (8002460 <HAL_DMA_IRQHandler+0x1f0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d029      	beq.n	800231e <HAL_DMA_IRQHandler+0xae>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a65      	ldr	r2, [pc, #404]	; (8002464 <HAL_DMA_IRQHandler+0x1f4>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d022      	beq.n	800231a <HAL_DMA_IRQHandler+0xaa>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a63      	ldr	r2, [pc, #396]	; (8002468 <HAL_DMA_IRQHandler+0x1f8>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01a      	beq.n	8002314 <HAL_DMA_IRQHandler+0xa4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a62      	ldr	r2, [pc, #392]	; (800246c <HAL_DMA_IRQHandler+0x1fc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d012      	beq.n	800230e <HAL_DMA_IRQHandler+0x9e>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a60      	ldr	r2, [pc, #384]	; (8002470 <HAL_DMA_IRQHandler+0x200>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00a      	beq.n	8002308 <HAL_DMA_IRQHandler+0x98>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a5f      	ldr	r2, [pc, #380]	; (8002474 <HAL_DMA_IRQHandler+0x204>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d102      	bne.n	8002302 <HAL_DMA_IRQHandler+0x92>
 80022fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002300:	e00e      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 8002302:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002306:	e00b      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 8002308:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800230c:	e008      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 800230e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002312:	e005      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 8002314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002318:	e002      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 800231a:	2340      	movs	r3, #64	; 0x40
 800231c:	e000      	b.n	8002320 <HAL_DMA_IRQHandler+0xb0>
 800231e:	2304      	movs	r3, #4
 8002320:	4a55      	ldr	r2, [pc, #340]	; (8002478 <HAL_DMA_IRQHandler+0x208>)
 8002322:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8094 	beq.w	8002456 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002336:	e08e      	b.n	8002456 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	2202      	movs	r2, #2
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d056      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x186>
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d051      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10b      	bne.n	8002378 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 020a 	bic.w	r2, r2, #10
 800236e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a38      	ldr	r2, [pc, #224]	; (8002460 <HAL_DMA_IRQHandler+0x1f0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d029      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x166>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a37      	ldr	r2, [pc, #220]	; (8002464 <HAL_DMA_IRQHandler+0x1f4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d022      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x162>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a35      	ldr	r2, [pc, #212]	; (8002468 <HAL_DMA_IRQHandler+0x1f8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01a      	beq.n	80023cc <HAL_DMA_IRQHandler+0x15c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a34      	ldr	r2, [pc, #208]	; (800246c <HAL_DMA_IRQHandler+0x1fc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d012      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x156>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a32      	ldr	r2, [pc, #200]	; (8002470 <HAL_DMA_IRQHandler+0x200>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d00a      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x150>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a31      	ldr	r2, [pc, #196]	; (8002474 <HAL_DMA_IRQHandler+0x204>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d102      	bne.n	80023ba <HAL_DMA_IRQHandler+0x14a>
 80023b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023b8:	e00e      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023be:	e00b      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023c4:	e008      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ca:	e005      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023d0:	e002      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023d2:	2320      	movs	r3, #32
 80023d4:	e000      	b.n	80023d8 <HAL_DMA_IRQHandler+0x168>
 80023d6:	2302      	movs	r3, #2
 80023d8:	4a27      	ldr	r2, [pc, #156]	; (8002478 <HAL_DMA_IRQHandler+0x208>)
 80023da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d034      	beq.n	8002456 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80023f4:	e02f      	b.n	8002456 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2208      	movs	r2, #8
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d028      	beq.n	8002458 <HAL_DMA_IRQHandler+0x1e8>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d023      	beq.n	8002458 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 020e 	bic.w	r2, r2, #14
 800241e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f202 	lsl.w	r2, r1, r2
 800242e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	2b00      	cmp	r3, #0
 800244c:	d004      	beq.n	8002458 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
    }
  }
  return;
 8002456:	bf00      	nop
 8002458:	bf00      	nop
}
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40020008 	.word	0x40020008
 8002464:	4002001c 	.word	0x4002001c
 8002468:	40020030 	.word	0x40020030
 800246c:	40020044 	.word	0x40020044
 8002470:	40020058 	.word	0x40020058
 8002474:	4002006c 	.word	0x4002006c
 8002478:	40020000 	.word	0x40020000

0800247c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	2101      	movs	r1, #1
 8002494:	fa01 f202 	lsl.w	r2, r1, r2
 8002498:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b10      	cmp	r3, #16
 80024a8:	d108      	bne.n	80024bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024ba:	e007      	b.n	80024cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d8:	b480      	push	{r7}
 80024da:	b08b      	sub	sp, #44	; 0x2c
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e2:	2300      	movs	r3, #0
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024e6:	2300      	movs	r3, #0
 80024e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ea:	e169      	b.n	80027c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024ec:	2201      	movs	r2, #1
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 8158 	bne.w	80027ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a9a      	ldr	r2, [pc, #616]	; (8002778 <HAL_GPIO_Init+0x2a0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d05e      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002514:	4a98      	ldr	r2, [pc, #608]	; (8002778 <HAL_GPIO_Init+0x2a0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d875      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800251a:	4a98      	ldr	r2, [pc, #608]	; (800277c <HAL_GPIO_Init+0x2a4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d058      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002520:	4a96      	ldr	r2, [pc, #600]	; (800277c <HAL_GPIO_Init+0x2a4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d86f      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002526:	4a96      	ldr	r2, [pc, #600]	; (8002780 <HAL_GPIO_Init+0x2a8>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d052      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 800252c:	4a94      	ldr	r2, [pc, #592]	; (8002780 <HAL_GPIO_Init+0x2a8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d869      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002532:	4a94      	ldr	r2, [pc, #592]	; (8002784 <HAL_GPIO_Init+0x2ac>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d04c      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002538:	4a92      	ldr	r2, [pc, #584]	; (8002784 <HAL_GPIO_Init+0x2ac>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d863      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800253e:	4a92      	ldr	r2, [pc, #584]	; (8002788 <HAL_GPIO_Init+0x2b0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d046      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
 8002544:	4a90      	ldr	r2, [pc, #576]	; (8002788 <HAL_GPIO_Init+0x2b0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d85d      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 800254a:	2b12      	cmp	r3, #18
 800254c:	d82a      	bhi.n	80025a4 <HAL_GPIO_Init+0xcc>
 800254e:	2b12      	cmp	r3, #18
 8002550:	d859      	bhi.n	8002606 <HAL_GPIO_Init+0x12e>
 8002552:	a201      	add	r2, pc, #4	; (adr r2, 8002558 <HAL_GPIO_Init+0x80>)
 8002554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002558:	080025d3 	.word	0x080025d3
 800255c:	080025ad 	.word	0x080025ad
 8002560:	080025bf 	.word	0x080025bf
 8002564:	08002601 	.word	0x08002601
 8002568:	08002607 	.word	0x08002607
 800256c:	08002607 	.word	0x08002607
 8002570:	08002607 	.word	0x08002607
 8002574:	08002607 	.word	0x08002607
 8002578:	08002607 	.word	0x08002607
 800257c:	08002607 	.word	0x08002607
 8002580:	08002607 	.word	0x08002607
 8002584:	08002607 	.word	0x08002607
 8002588:	08002607 	.word	0x08002607
 800258c:	08002607 	.word	0x08002607
 8002590:	08002607 	.word	0x08002607
 8002594:	08002607 	.word	0x08002607
 8002598:	08002607 	.word	0x08002607
 800259c:	080025b5 	.word	0x080025b5
 80025a0:	080025c9 	.word	0x080025c9
 80025a4:	4a79      	ldr	r2, [pc, #484]	; (800278c <HAL_GPIO_Init+0x2b4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025aa:	e02c      	b.n	8002606 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	623b      	str	r3, [r7, #32]
          break;
 80025b2:	e029      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	3304      	adds	r3, #4
 80025ba:	623b      	str	r3, [r7, #32]
          break;
 80025bc:	e024      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	3308      	adds	r3, #8
 80025c4:	623b      	str	r3, [r7, #32]
          break;
 80025c6:	e01f      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	330c      	adds	r3, #12
 80025ce:	623b      	str	r3, [r7, #32]
          break;
 80025d0:	e01a      	b.n	8002608 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d102      	bne.n	80025e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025da:	2304      	movs	r3, #4
 80025dc:	623b      	str	r3, [r7, #32]
          break;
 80025de:	e013      	b.n	8002608 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e8:	2308      	movs	r3, #8
 80025ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	611a      	str	r2, [r3, #16]
          break;
 80025f2:	e009      	b.n	8002608 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025f4:	2308      	movs	r3, #8
 80025f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	615a      	str	r2, [r3, #20]
          break;
 80025fe:	e003      	b.n	8002608 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]
          break;
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x130>
          break;
 8002606:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2bff      	cmp	r3, #255	; 0xff
 800260c:	d801      	bhi.n	8002612 <HAL_GPIO_Init+0x13a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	e001      	b.n	8002616 <HAL_GPIO_Init+0x13e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2bff      	cmp	r3, #255	; 0xff
 800261c:	d802      	bhi.n	8002624 <HAL_GPIO_Init+0x14c>
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	e002      	b.n	800262a <HAL_GPIO_Init+0x152>
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	3b08      	subs	r3, #8
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	210f      	movs	r1, #15
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	6a39      	ldr	r1, [r7, #32]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	fa01 f303 	lsl.w	r3, r1, r3
 8002644:	431a      	orrs	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80b1 	beq.w	80027ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002658:	4b4d      	ldr	r3, [pc, #308]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a4c      	ldr	r2, [pc, #304]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_GPIO_Init+0x2b8>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002670:	4a48      	ldr	r2, [pc, #288]	; (8002794 <HAL_GPIO_Init+0x2bc>)
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3302      	adds	r3, #2
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	220f      	movs	r2, #15
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a40      	ldr	r2, [pc, #256]	; (8002798 <HAL_GPIO_Init+0x2c0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_GPIO_Init+0x1ec>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3f      	ldr	r2, [pc, #252]	; (800279c <HAL_GPIO_Init+0x2c4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00d      	beq.n	80026c0 <HAL_GPIO_Init+0x1e8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a3e      	ldr	r2, [pc, #248]	; (80027a0 <HAL_GPIO_Init+0x2c8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <HAL_GPIO_Init+0x1e4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3d      	ldr	r2, [pc, #244]	; (80027a4 <HAL_GPIO_Init+0x2cc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_GPIO_Init+0x1e0>
 80026b4:	2303      	movs	r3, #3
 80026b6:	e006      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026b8:	2304      	movs	r3, #4
 80026ba:	e004      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026bc:	2302      	movs	r3, #2
 80026be:	e002      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_GPIO_Init+0x1ee>
 80026c4:	2300      	movs	r3, #0
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	f002 0203 	and.w	r2, r2, #3
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	4093      	lsls	r3, r2
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026d6:	492f      	ldr	r1, [pc, #188]	; (8002794 <HAL_GPIO_Init+0x2bc>)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	089b      	lsrs	r3, r3, #2
 80026dc:	3302      	adds	r3, #2
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	492c      	ldr	r1, [pc, #176]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	4928      	ldr	r1, [pc, #160]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002708:	4013      	ands	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002718:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4922      	ldr	r1, [pc, #136]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	43db      	mvns	r3, r3
 800272e:	491e      	ldr	r1, [pc, #120]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002730:	4013      	ands	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	4918      	ldr	r1, [pc, #96]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800274e:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	43db      	mvns	r3, r3
 8002756:	4914      	ldr	r1, [pc, #80]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 8002758:	4013      	ands	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d021      	beq.n	80027ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_GPIO_Init+0x2d0>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	600b      	str	r3, [r1, #0]
 8002774:	e021      	b.n	80027ba <HAL_GPIO_Init+0x2e2>
 8002776:	bf00      	nop
 8002778:	10320000 	.word	0x10320000
 800277c:	10310000 	.word	0x10310000
 8002780:	10220000 	.word	0x10220000
 8002784:	10210000 	.word	0x10210000
 8002788:	10120000 	.word	0x10120000
 800278c:	10110000 	.word	0x10110000
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	40010800 	.word	0x40010800
 800279c:	40010c00 	.word	0x40010c00
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40011400 	.word	0x40011400
 80027a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_GPIO_Init+0x304>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	4909      	ldr	r1, [pc, #36]	; (80027dc <HAL_GPIO_Init+0x304>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	3301      	adds	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f47f ae8e 	bne.w	80024ec <HAL_GPIO_Init+0x14>
  }
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	372c      	adds	r7, #44	; 0x2c
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40010400 	.word	0x40010400

080027e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e12b      	b.n	8002a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fc5a 	bl	80010c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002844:	f001 fbca 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8002848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4a81      	ldr	r2, [pc, #516]	; (8002a54 <HAL_I2C_Init+0x274>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d807      	bhi.n	8002864 <HAL_I2C_Init+0x84>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a80      	ldr	r2, [pc, #512]	; (8002a58 <HAL_I2C_Init+0x278>)
 8002858:	4293      	cmp	r3, r2
 800285a:	bf94      	ite	ls
 800285c:	2301      	movls	r3, #1
 800285e:	2300      	movhi	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	e006      	b.n	8002872 <HAL_I2C_Init+0x92>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4a7d      	ldr	r2, [pc, #500]	; (8002a5c <HAL_I2C_Init+0x27c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	bf94      	ite	ls
 800286c:	2301      	movls	r3, #1
 800286e:	2300      	movhi	r3, #0
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0e7      	b.n	8002a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4a78      	ldr	r2, [pc, #480]	; (8002a60 <HAL_I2C_Init+0x280>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	0c9b      	lsrs	r3, r3, #18
 8002884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a6a      	ldr	r2, [pc, #424]	; (8002a54 <HAL_I2C_Init+0x274>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d802      	bhi.n	80028b4 <HAL_I2C_Init+0xd4>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3301      	adds	r3, #1
 80028b2:	e009      	b.n	80028c8 <HAL_I2C_Init+0xe8>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	4a69      	ldr	r2, [pc, #420]	; (8002a64 <HAL_I2C_Init+0x284>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	099b      	lsrs	r3, r3, #6
 80028c6:	3301      	adds	r3, #1
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	495c      	ldr	r1, [pc, #368]	; (8002a54 <HAL_I2C_Init+0x274>)
 80028e4:	428b      	cmp	r3, r1
 80028e6:	d819      	bhi.n	800291c <HAL_I2C_Init+0x13c>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1e59      	subs	r1, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028f6:	1c59      	adds	r1, r3, #1
 80028f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80028fc:	400b      	ands	r3, r1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_I2C_Init+0x138>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e59      	subs	r1, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002910:	3301      	adds	r3, #1
 8002912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002916:	e051      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 8002918:	2304      	movs	r3, #4
 800291a:	e04f      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d111      	bne.n	8002948 <HAL_I2C_Init+0x168>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e58      	subs	r0, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	e012      	b.n	800296e <HAL_I2C_Init+0x18e>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1e58      	subs	r0, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	0099      	lsls	r1, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	fbb0 f3f3 	udiv	r3, r0, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_I2C_Init+0x196>
 8002972:	2301      	movs	r3, #1
 8002974:	e022      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10e      	bne.n	800299c <HAL_I2C_Init+0x1bc>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1e58      	subs	r0, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6859      	ldr	r1, [r3, #4]
 8002986:	460b      	mov	r3, r1
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	440b      	add	r3, r1
 800298c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299a:	e00f      	b.n	80029bc <HAL_I2C_Init+0x1dc>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e58      	subs	r0, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6859      	ldr	r1, [r3, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	0099      	lsls	r1, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	6809      	ldr	r1, [r1, #0]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6911      	ldr	r1, [r2, #16]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	4311      	orrs	r1, r2
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	000186a0 	.word	0x000186a0
 8002a58:	001e847f 	.word	0x001e847f
 8002a5c:	003d08ff 	.word	0x003d08ff
 8002a60:	431bde83 	.word	0x431bde83
 8002a64:	10624dd3 	.word	0x10624dd3

08002a68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	461a      	mov	r2, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	817b      	strh	r3, [r7, #10]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7fe fcc0 	bl	8001400 <HAL_GetTick>
 8002a80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	f040 80e0 	bne.w	8002c50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2319      	movs	r3, #25
 8002a96:	2201      	movs	r2, #1
 8002a98:	4970      	ldr	r1, [pc, #448]	; (8002c5c <HAL_I2C_Master_Transmit+0x1f4>)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fc9e 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e0d3      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_I2C_Master_Transmit+0x50>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e0cc      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d007      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2221      	movs	r2, #33	; 0x21
 8002af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2210      	movs	r2, #16
 8002afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	893a      	ldrh	r2, [r7, #8]
 8002b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a50      	ldr	r2, [pc, #320]	; (8002c60 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b20:	8979      	ldrh	r1, [r7, #10]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	6a3a      	ldr	r2, [r7, #32]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fb08 	bl	800313c <I2C_MasterRequestWrite>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e08d      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b4c:	e066      	b.n	8002c1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	6a39      	ldr	r1, [r7, #32]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 fd5c 	bl	8003610 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00d      	beq.n	8002b7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d107      	bne.n	8002b76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e06b      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	781a      	ldrb	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_I2C_Master_Transmit+0x188>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d017      	beq.n	8002bf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	781a      	ldrb	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	6a39      	ldr	r1, [r7, #32]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fd53 	bl	80036a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d107      	bne.n	8002c18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e01a      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d194      	bne.n	8002b4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e000      	b.n	8002c52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c50:	2302      	movs	r3, #2
  }
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	00100002 	.word	0x00100002
 8002c60:	ffff0000 	.word	0xffff0000

08002c64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	460b      	mov	r3, r1
 8002c72:	817b      	strh	r3, [r7, #10]
 8002c74:	4613      	mov	r3, r2
 8002c76:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c7c:	f7fe fbc0 	bl	8001400 <HAL_GetTick>
 8002c80:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	f040 824b 	bne.w	8003126 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2319      	movs	r3, #25
 8002c96:	2201      	movs	r2, #1
 8002c98:	497f      	ldr	r1, [pc, #508]	; (8002e98 <HAL_I2C_Master_Receive+0x234>)
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fb9e 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e23e      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_I2C_Master_Receive+0x54>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e237      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d007      	beq.n	8002cde <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2222      	movs	r2, #34	; 0x22
 8002cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	893a      	ldrh	r2, [r7, #8]
 8002d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a5f      	ldr	r2, [pc, #380]	; (8002e9c <HAL_I2C_Master_Receive+0x238>)
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d20:	8979      	ldrh	r1, [r7, #10]
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 fa8a 	bl	8003240 <I2C_MasterRequestRead>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e1f8      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d113      	bne.n	8002d66 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e1cc      	b.n	8003100 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d11e      	bne.n	8002dac <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d7e:	b672      	cpsid	i
}
 8002d80:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002da8:	b662      	cpsie	i
}
 8002daa:	e035      	b.n	8002e18 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d11e      	bne.n	8002df2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc4:	b672      	cpsid	i
}
 8002dc6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002dee:	b662      	cpsie	i
}
 8002df0:	e012      	b.n	8002e18 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e18:	e172      	b.n	8003100 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	f200 811f 	bhi.w	8003062 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d123      	bne.n	8002e74 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 fc7d 	bl	8003730 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e173      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691a      	ldr	r2, [r3, #16]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	1c5a      	adds	r2, r3, #1
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e72:	e145      	b.n	8003100 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d152      	bne.n	8002f22 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	2200      	movs	r2, #0
 8002e84:	4906      	ldr	r1, [pc, #24]	; (8002ea0 <HAL_I2C_Master_Receive+0x23c>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 faa8 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e148      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
 8002e96:	bf00      	nop
 8002e98:	00100002 	.word	0x00100002
 8002e9c:	ffff0000 	.word	0xffff0000
 8002ea0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ea4:	b672      	cpsid	i
}
 8002ea6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002eea:	b662      	cpsie	i
}
 8002eec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f20:	e0ee      	b.n	8003100 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	2200      	movs	r2, #0
 8002f2a:	4981      	ldr	r1, [pc, #516]	; (8003130 <HAL_I2C_Master_Receive+0x4cc>)
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fa55 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0f5      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4c:	b672      	cpsid	i
}
 8002f4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691a      	ldr	r2, [r3, #16]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f82:	4b6c      	ldr	r3, [pc, #432]	; (8003134 <HAL_I2C_Master_Receive+0x4d0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	4a6b      	ldr	r2, [pc, #428]	; (8003138 <HAL_I2C_Master_Receive+0x4d4>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0a1a      	lsrs	r2, r3, #8
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00da      	lsls	r2, r3, #3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d118      	bne.n	8002fda <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f043 0220 	orr.w	r2, r3, #32
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002fca:	b662      	cpsie	i
}
 8002fcc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0a6      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d1d9      	bne.n	8002f9c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800302a:	b662      	cpsie	i
}
 800302c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003060:	e04e      	b.n	8003100 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fb62 	bl	8003730 <I2C_WaitOnRXNEFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e058      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	b2d2      	uxtb	r2, r2
 8003082:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d124      	bne.n	8003100 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d107      	bne.n	80030ce <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	2b00      	cmp	r3, #0
 8003106:	f47f ae88 	bne.w	8002e1a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	e000      	b.n	8003128 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003126:	2302      	movs	r3, #2
  }
}
 8003128:	4618      	mov	r0, r3
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	00010004 	.word	0x00010004
 8003134:	20000000 	.word	0x20000000
 8003138:	14f8b589 	.word	0x14f8b589

0800313c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	607a      	str	r2, [r7, #4]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	460b      	mov	r3, r1
 800314a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b08      	cmp	r3, #8
 8003156:	d006      	beq.n	8003166 <I2C_MasterRequestWrite+0x2a>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d003      	beq.n	8003166 <I2C_MasterRequestWrite+0x2a>
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003164:	d108      	bne.n	8003178 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	e00b      	b.n	8003190 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	2b12      	cmp	r3, #18
 800317e:	d107      	bne.n	8003190 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f91d 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b6:	d103      	bne.n	80031c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e035      	b.n	8003230 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031cc:	d108      	bne.n	80031e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ce:	897b      	ldrh	r3, [r7, #10]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031dc:	611a      	str	r2, [r3, #16]
 80031de:	e01b      	b.n	8003218 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031e0:	897b      	ldrh	r3, [r7, #10]
 80031e2:	11db      	asrs	r3, r3, #7
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 0306 	and.w	r3, r3, #6
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f063 030f 	orn	r3, r3, #15
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	490e      	ldr	r1, [pc, #56]	; (8003238 <I2C_MasterRequestWrite+0xfc>)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f966 	bl	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e010      	b.n	8003230 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4907      	ldr	r1, [pc, #28]	; (800323c <I2C_MasterRequestWrite+0x100>)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f956 	bl	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	00010008 	.word	0x00010008
 800323c:	00010002 	.word	0x00010002

08003240 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	460b      	mov	r3, r1
 800324e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003264:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d006      	beq.n	800327a <I2C_MasterRequestRead+0x3a>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d003      	beq.n	800327a <I2C_MasterRequestRead+0x3a>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003278:	d108      	bne.n	800328c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e00b      	b.n	80032a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	2b11      	cmp	r3, #17
 8003292:	d107      	bne.n	80032a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f893 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ca:	d103      	bne.n	80032d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e079      	b.n	80033cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e0:	d108      	bne.n	80032f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	611a      	str	r2, [r3, #16]
 80032f2:	e05f      	b.n	80033b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032f4:	897b      	ldrh	r3, [r7, #10]
 80032f6:	11db      	asrs	r3, r3, #7
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 0306 	and.w	r3, r3, #6
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f063 030f 	orn	r3, r3, #15
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4930      	ldr	r1, [pc, #192]	; (80033d4 <I2C_MasterRequestRead+0x194>)
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f8dc 	bl	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e054      	b.n	80033cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4929      	ldr	r1, [pc, #164]	; (80033d8 <I2C_MasterRequestRead+0x198>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f8cc 	bl	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e044      	b.n	80033cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003366:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f831 	bl	80033dc <I2C_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00d      	beq.n	800339c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338e:	d103      	bne.n	8003398 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e017      	b.n	80033cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800339c:	897b      	ldrh	r3, [r7, #10]
 800339e:	11db      	asrs	r3, r3, #7
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 0306 	and.w	r3, r3, #6
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f063 030e 	orn	r3, r3, #14
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4907      	ldr	r1, [pc, #28]	; (80033d8 <I2C_MasterRequestRead+0x198>)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f888 	bl	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	00010008 	.word	0x00010008
 80033d8:	00010002 	.word	0x00010002

080033dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ec:	e048      	b.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d044      	beq.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f6:	f7fe f803 	bl	8001400 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d302      	bcc.n	800340c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d139      	bne.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d10d      	bne.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	43da      	mvns	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	e00c      	b.n	800344c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	43da      	mvns	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	bf0c      	ite	eq
 8003444:	2301      	moveq	r3, #1
 8003446:	2300      	movne	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	79fb      	ldrb	r3, [r7, #7]
 800344e:	429a      	cmp	r2, r3
 8003450:	d116      	bne.n	8003480 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f043 0220 	orr.w	r2, r3, #32
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e023      	b.n	80034c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	0c1b      	lsrs	r3, r3, #16
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d10d      	bne.n	80034a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	43da      	mvns	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4013      	ands	r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	e00c      	b.n	80034c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	43da      	mvns	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	4013      	ands	r3, r2
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d093      	beq.n	80033ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034de:	e071      	b.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	d123      	bne.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003508:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f043 0204 	orr.w	r2, r3, #4
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e067      	b.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d041      	beq.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003540:	f7fd ff5e 	bl	8001400 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d302      	bcc.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d136      	bne.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	0c1b      	lsrs	r3, r3, #16
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d10c      	bne.n	800357a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	bf14      	ite	ne
 8003572:	2301      	movne	r3, #1
 8003574:	2300      	moveq	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	e00b      	b.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	43da      	mvns	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	4013      	ands	r3, r2
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d016      	beq.n	80035c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e021      	b.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	0c1b      	lsrs	r3, r3, #16
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d10c      	bne.n	80035e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	43da      	mvns	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4013      	ands	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e00b      	b.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f af6d 	bne.w	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800361c:	e034      	b.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f8e3 	bl	80037ea <I2C_IsAcknowledgeFailed>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e034      	b.n	8003698 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d028      	beq.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003636:	f7fd fee3 	bl	8001400 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11d      	bne.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b80      	cmp	r3, #128	; 0x80
 8003658:	d016      	beq.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e007      	b.n	8003698 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003692:	2b80      	cmp	r3, #128	; 0x80
 8003694:	d1c3      	bne.n	800361e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036ac:	e034      	b.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 f89b 	bl	80037ea <I2C_IsAcknowledgeFailed>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e034      	b.n	8003728 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d028      	beq.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7fd fe9b 	bl	8001400 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d11d      	bne.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d016      	beq.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e007      	b.n	8003728 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b04      	cmp	r3, #4
 8003724:	d1c3      	bne.n	80036ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800373c:	e049      	b.n	80037d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f003 0310 	and.w	r3, r3, #16
 8003748:	2b10      	cmp	r3, #16
 800374a:	d119      	bne.n	8003780 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0210 	mvn.w	r2, #16
 8003754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e030      	b.n	80037e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003780:	f7fd fe3e 	bl	8001400 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	429a      	cmp	r2, r3
 800378e:	d302      	bcc.n	8003796 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11d      	bne.n	80037d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d016      	beq.n	80037d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e007      	b.n	80037e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d1ae      	bne.n	800373e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003800:	d11b      	bne.n	800383a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800380a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f043 0204 	orr.w	r2, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
	...

08003848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e272      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 8087 	beq.w	8003976 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003868:	4b92      	ldr	r3, [pc, #584]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b04      	cmp	r3, #4
 8003872:	d00c      	beq.n	800388e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003874:	4b8f      	ldr	r3, [pc, #572]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d112      	bne.n	80038a6 <HAL_RCC_OscConfig+0x5e>
 8003880:	4b8c      	ldr	r3, [pc, #560]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388c:	d10b      	bne.n	80038a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388e:	4b89      	ldr	r3, [pc, #548]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d06c      	beq.n	8003974 <HAL_RCC_OscConfig+0x12c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d168      	bne.n	8003974 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e24c      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ae:	d106      	bne.n	80038be <HAL_RCC_OscConfig+0x76>
 80038b0:	4b80      	ldr	r3, [pc, #512]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a7f      	ldr	r2, [pc, #508]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	e02e      	b.n	800391c <HAL_RCC_OscConfig+0xd4>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x98>
 80038c6:	4b7b      	ldr	r3, [pc, #492]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a7a      	ldr	r2, [pc, #488]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b78      	ldr	r3, [pc, #480]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a77      	ldr	r2, [pc, #476]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e01d      	b.n	800391c <HAL_RCC_OscConfig+0xd4>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e8:	d10c      	bne.n	8003904 <HAL_RCC_OscConfig+0xbc>
 80038ea:	4b72      	ldr	r3, [pc, #456]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a71      	ldr	r2, [pc, #452]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	4b6f      	ldr	r3, [pc, #444]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a6e      	ldr	r2, [pc, #440]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e00b      	b.n	800391c <HAL_RCC_OscConfig+0xd4>
 8003904:	4b6b      	ldr	r3, [pc, #428]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a6a      	ldr	r2, [pc, #424]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 800390a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b68      	ldr	r3, [pc, #416]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a67      	ldr	r2, [pc, #412]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800391a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d013      	beq.n	800394c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fd fd6c 	bl	8001400 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fd fd68 	bl	8001400 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	; 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e200      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393e:	4b5d      	ldr	r3, [pc, #372]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0xe4>
 800394a:	e014      	b.n	8003976 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fd fd58 	bl	8001400 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003954:	f7fd fd54 	bl	8001400 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b64      	cmp	r3, #100	; 0x64
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e1ec      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003966:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x10c>
 8003972:	e000      	b.n	8003976 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d063      	beq.n	8003a4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003982:	4b4c      	ldr	r3, [pc, #304]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 030c 	and.w	r3, r3, #12
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00b      	beq.n	80039a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800398e:	4b49      	ldr	r3, [pc, #292]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b08      	cmp	r3, #8
 8003998:	d11c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x18c>
 800399a:	4b46      	ldr	r3, [pc, #280]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d116      	bne.n	80039d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a6:	4b43      	ldr	r3, [pc, #268]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_RCC_OscConfig+0x176>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d001      	beq.n	80039be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e1c0      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039be:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4939      	ldr	r1, [pc, #228]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d2:	e03a      	b.n	8003a4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039dc:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <HAL_RCC_OscConfig+0x270>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fd fd0d 	bl	8001400 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ea:	f7fd fd09 	bl	8001400 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e1a1      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fc:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a08:	4b2a      	ldr	r3, [pc, #168]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4927      	ldr	r1, [pc, #156]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	600b      	str	r3, [r1, #0]
 8003a1c:	e015      	b.n	8003a4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a1e:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <HAL_RCC_OscConfig+0x270>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fd fcec 	bl	8001400 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2c:	f7fd fce8 	bl	8001400 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e180      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d03a      	beq.n	8003acc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d019      	beq.n	8003a92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7fd fccc 	bl	8001400 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6c:	f7fd fcc8 	bl	8001400 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e160      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	f000 face 	bl	800402c <RCC_Delay>
 8003a90:	e01c      	b.n	8003acc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_RCC_OscConfig+0x274>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a98:	f7fd fcb2 	bl	8001400 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9e:	e00f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa0:	f7fd fcae 	bl	8001400 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d908      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e146      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	42420000 	.word	0x42420000
 8003abc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	4b92      	ldr	r3, [pc, #584]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e9      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80a6 	beq.w	8003c26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ada:	2300      	movs	r3, #0
 8003adc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ade:	4b8b      	ldr	r3, [pc, #556]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	4b88      	ldr	r3, [pc, #544]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4a87      	ldr	r2, [pc, #540]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af4:	61d3      	str	r3, [r2, #28]
 8003af6:	4b85      	ldr	r3, [pc, #532]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b06:	4b82      	ldr	r3, [pc, #520]	; (8003d10 <HAL_RCC_OscConfig+0x4c8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d118      	bne.n	8003b44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b12:	4b7f      	ldr	r3, [pc, #508]	; (8003d10 <HAL_RCC_OscConfig+0x4c8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7e      	ldr	r2, [pc, #504]	; (8003d10 <HAL_RCC_OscConfig+0x4c8>)
 8003b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b1e:	f7fd fc6f 	bl	8001400 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b26:	f7fd fc6b 	bl	8001400 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b64      	cmp	r3, #100	; 0x64
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e103      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	4b75      	ldr	r3, [pc, #468]	; (8003d10 <HAL_RCC_OscConfig+0x4c8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d106      	bne.n	8003b5a <HAL_RCC_OscConfig+0x312>
 8003b4c:	4b6f      	ldr	r3, [pc, #444]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4a6e      	ldr	r2, [pc, #440]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6213      	str	r3, [r2, #32]
 8003b58:	e02d      	b.n	8003bb6 <HAL_RCC_OscConfig+0x36e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0x334>
 8003b62:	4b6a      	ldr	r3, [pc, #424]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	4a69      	ldr	r2, [pc, #420]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	6213      	str	r3, [r2, #32]
 8003b6e:	4b67      	ldr	r3, [pc, #412]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4a66      	ldr	r2, [pc, #408]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	6213      	str	r3, [r2, #32]
 8003b7a:	e01c      	b.n	8003bb6 <HAL_RCC_OscConfig+0x36e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCC_OscConfig+0x356>
 8003b84:	4b61      	ldr	r3, [pc, #388]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	4a60      	ldr	r2, [pc, #384]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	f043 0304 	orr.w	r3, r3, #4
 8003b8e:	6213      	str	r3, [r2, #32]
 8003b90:	4b5e      	ldr	r3, [pc, #376]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4a5d      	ldr	r2, [pc, #372]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6213      	str	r3, [r2, #32]
 8003b9c:	e00b      	b.n	8003bb6 <HAL_RCC_OscConfig+0x36e>
 8003b9e:	4b5b      	ldr	r3, [pc, #364]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	4a5a      	ldr	r2, [pc, #360]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	6213      	str	r3, [r2, #32]
 8003baa:	4b58      	ldr	r3, [pc, #352]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4a57      	ldr	r2, [pc, #348]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d015      	beq.n	8003bea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bbe:	f7fd fc1f 	bl	8001400 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc6:	f7fd fc1b 	bl	8001400 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e0b1      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	4b4b      	ldr	r3, [pc, #300]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ee      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x37e>
 8003be8:	e014      	b.n	8003c14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bea:	f7fd fc09 	bl	8001400 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf2:	f7fd fc05 	bl	8001400 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e09b      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c08:	4b40      	ldr	r3, [pc, #256]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ee      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4b3c      	ldr	r3, [pc, #240]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	4a3b      	ldr	r2, [pc, #236]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 8087 	beq.w	8003d3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c30:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d061      	beq.n	8003d00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d146      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c44:	4b33      	ldr	r3, [pc, #204]	; (8003d14 <HAL_RCC_OscConfig+0x4cc>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7fd fbd9 	bl	8001400 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fd fbd5 	bl	8001400 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e06d      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c64:	4b29      	ldr	r3, [pc, #164]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1f0      	bne.n	8003c52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c78:	d108      	bne.n	8003c8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c7a:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	4921      	ldr	r1, [pc, #132]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a19      	ldr	r1, [r3, #32]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	491b      	ldr	r1, [pc, #108]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ca4:	4b1b      	ldr	r3, [pc, #108]	; (8003d14 <HAL_RCC_OscConfig+0x4cc>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003caa:	f7fd fba9 	bl	8001400 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb2:	f7fd fba5 	bl	8001400 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e03d      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x46a>
 8003cd0:	e035      	b.n	8003d3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd2:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <HAL_RCC_OscConfig+0x4cc>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fd fb92 	bl	8001400 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7fd fb8e 	bl	8001400 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e026      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x498>
 8003cfe:	e01e      	b.n	8003d3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d107      	bne.n	8003d18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e019      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40007000 	.word	0x40007000
 8003d14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_RCC_OscConfig+0x500>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d001      	beq.n	8003d3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e000      	b.n	8003d40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000

08003d4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0d0      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d60:	4b6a      	ldr	r3, [pc, #424]	; (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d910      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b67      	ldr	r3, [pc, #412]	; (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 0207 	bic.w	r2, r3, #7
 8003d76:	4965      	ldr	r1, [pc, #404]	; (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b63      	ldr	r3, [pc, #396]	; (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0b8      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da8:	4b59      	ldr	r3, [pc, #356]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	4a58      	ldr	r2, [pc, #352]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003db2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc0:	4b53      	ldr	r3, [pc, #332]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4a52      	ldr	r2, [pc, #328]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	494d      	ldr	r1, [pc, #308]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d040      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d115      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0a:	4b41      	ldr	r3, [pc, #260]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e073      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e06b      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2a:	4b39      	ldr	r3, [pc, #228]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f023 0203 	bic.w	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	4936      	ldr	r1, [pc, #216]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e3c:	f7fd fae0 	bl	8001400 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7fd fadc 	bl	8001400 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e053      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 020c 	and.w	r2, r3, #12
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d1eb      	bne.n	8003e44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d210      	bcs.n	8003e9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 0207 	bic.w	r2, r3, #7
 8003e82:	4922      	ldr	r1, [pc, #136]	; (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <HAL_RCC_ClockConfig+0x1c0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e032      	b.n	8003f02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea8:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	4916      	ldr	r1, [pc, #88]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	490e      	ldr	r1, [pc, #56]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003eda:	f000 f821 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	490a      	ldr	r1, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003eec:	5ccb      	ldrb	r3, [r1, r3]
 8003eee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef2:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <HAL_RCC_ClockConfig+0x1cc>)
 8003ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ef6:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1d0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fd fa3e 	bl	800137c <HAL_InitTick>

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40022000 	.word	0x40022000
 8003f10:	40021000 	.word	0x40021000
 8003f14:	08005610 	.word	0x08005610
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	20000004 	.word	0x20000004

08003f20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
 8003f32:	2300      	movs	r3, #0
 8003f34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x30>
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0x36>
 8003f4e:	e027      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f52:	613b      	str	r3, [r7, #16]
      break;
 8003f54:	e027      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	0c9b      	lsrs	r3, r3, #18
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
 8003f62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	0c5b      	lsrs	r3, r3, #17
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a0d      	ldr	r2, [pc, #52]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f82:	fb03 f202 	mul.w	r2, r3, r2
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e004      	b.n	8003f9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a0c      	ldr	r2, [pc, #48]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f94:	fb02 f303 	mul.w	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	613b      	str	r3, [r7, #16]
      break;
 8003f9e:	e002      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa2:	613b      	str	r3, [r7, #16]
      break;
 8003fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fa6:	693b      	ldr	r3, [r7, #16]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	007a1200 	.word	0x007a1200
 8003fbc:	08005628 	.word	0x08005628
 8003fc0:	08005638 	.word	0x08005638
 8003fc4:	003d0900 	.word	0x003d0900

08003fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fcc:	4b02      	ldr	r3, [pc, #8]	; (8003fd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	20000000 	.word	0x20000000

08003fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fe0:	f7ff fff2 	bl	8003fc8 <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4903      	ldr	r1, [pc, #12]	; (8004000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000
 8004000:	08005620 	.word	0x08005620

08004004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004008:	f7ff ffde 	bl	8003fc8 <HAL_RCC_GetHCLKFreq>
 800400c:	4602      	mov	r2, r0
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	0adb      	lsrs	r3, r3, #11
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	4903      	ldr	r1, [pc, #12]	; (8004028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800401a:	5ccb      	ldrb	r3, [r1, r3]
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004020:	4618      	mov	r0, r3
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000
 8004028:	08005620 	.word	0x08005620

0800402c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <RCC_Delay+0x34>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <RCC_Delay+0x38>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	0a5b      	lsrs	r3, r3, #9
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004048:	bf00      	nop
  }
  while (Delay --);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1e5a      	subs	r2, r3, #1
 800404e:	60fa      	str	r2, [r7, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f9      	bne.n	8004048 <RCC_Delay+0x1c>
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	20000000 	.word	0x20000000
 8004064:	10624dd3 	.word	0x10624dd3

08004068 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	2300      	movs	r3, #0
 8004076:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d07d      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004084:	2300      	movs	r3, #0
 8004086:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004088:	4b4f      	ldr	r3, [pc, #316]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004094:	4b4c      	ldr	r3, [pc, #304]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	4a4b      	ldr	r2, [pc, #300]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409e:	61d3      	str	r3, [r2, #28]
 80040a0:	4b49      	ldr	r3, [pc, #292]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ac:	2301      	movs	r3, #1
 80040ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	4b46      	ldr	r3, [pc, #280]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d118      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040bc:	4b43      	ldr	r3, [pc, #268]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a42      	ldr	r2, [pc, #264]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c8:	f7fd f99a 	bl	8001400 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	e008      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d0:	f7fd f996 	bl	8001400 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e06d      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e2:	4b3a      	ldr	r3, [pc, #232]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040ee:	4b36      	ldr	r3, [pc, #216]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d02e      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	429a      	cmp	r2, r3
 800410a:	d027      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800410c:	4b2e      	ldr	r3, [pc, #184]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004114:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004116:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800411c:	4b2c      	ldr	r3, [pc, #176]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004122:	4a29      	ldr	r2, [pc, #164]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d014      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004132:	f7fd f965 	bl	8001400 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	e00a      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413a:	f7fd f961 	bl	8001400 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f241 3288 	movw	r2, #5000	; 0x1388
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e036      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004150:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ee      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800415c:	4b1a      	ldr	r3, [pc, #104]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4917      	ldr	r1, [pc, #92]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416a:	4313      	orrs	r3, r2
 800416c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004174:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	490b      	ldr	r1, [pc, #44]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419a:	4313      	orrs	r3, r2
 800419c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041aa:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	4904      	ldr	r1, [pc, #16]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40007000 	.word	0x40007000
 80041d0:	42420440 	.word	0x42420440

080041d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d00a      	beq.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	f200 808a 	bhi.w	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d045      	beq.n	8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d075      	beq.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800420a:	e082      	b.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800420c:	4b46      	ldr	r3, [pc, #280]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004212:	4b45      	ldr	r3, [pc, #276]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d07b      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	0c9b      	lsrs	r3, r3, #18
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	4a41      	ldr	r2, [pc, #260]	; (800432c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004228:	5cd3      	ldrb	r3, [r2, r3]
 800422a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d015      	beq.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004236:	4b3c      	ldr	r3, [pc, #240]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	0c5b      	lsrs	r3, r3, #17
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	4a3b      	ldr	r2, [pc, #236]	; (8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004242:	5cd3      	ldrb	r3, [r2, r3]
 8004244:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004250:	4a38      	ldr	r2, [pc, #224]	; (8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fbb2 f2f3 	udiv	r2, r2, r3
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	fb02 f303 	mul.w	r3, r2, r3
 800425e:	61fb      	str	r3, [r7, #28]
 8004260:	e004      	b.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4a34      	ldr	r2, [pc, #208]	; (8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800426c:	4b2e      	ldr	r3, [pc, #184]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004278:	d102      	bne.n	8004280 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	61bb      	str	r3, [r7, #24]
      break;
 800427e:	e04a      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4a2d      	ldr	r2, [pc, #180]	; (800433c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004286:	fba2 2303 	umull	r2, r3, r2, r3
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	61bb      	str	r3, [r7, #24]
      break;
 800428e:	e042      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004290:	4b25      	ldr	r3, [pc, #148]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a0:	d108      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80042ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	e01f      	b.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042be:	d109      	bne.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80042cc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	e00f      	b.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042de:	d11c      	bne.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d016      	beq.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80042ec:	f24f 4324 	movw	r3, #62500	; 0xf424
 80042f0:	61bb      	str	r3, [r7, #24]
      break;
 80042f2:	e012      	b.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80042f4:	e011      	b.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80042f6:	f7ff fe85 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 80042fa:	4602      	mov	r2, r0
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	0b9b      	lsrs	r3, r3, #14
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	3301      	adds	r3, #1
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	fbb2 f3f3 	udiv	r3, r2, r3
 800430e:	61bb      	str	r3, [r7, #24]
      break;
 8004310:	e004      	b.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004312:	bf00      	nop
 8004314:	e002      	b.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004316:	bf00      	nop
 8004318:	e000      	b.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800431a:	bf00      	nop
    }
  }
  return (frequency);
 800431c:	69bb      	ldr	r3, [r7, #24]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000
 800432c:	0800563c 	.word	0x0800563c
 8004330:	0800564c 	.word	0x0800564c
 8004334:	007a1200 	.word	0x007a1200
 8004338:	003d0900 	.word	0x003d0900
 800433c:	aaaaaaab 	.word	0xaaaaaaab

08004340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e041      	b.n	80043d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc feea 	bl	8001140 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3304      	adds	r3, #4
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f000 f940 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d001      	beq.n	80043f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_TIM_Base_Start+0x88>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00e      	beq.n	8004428 <HAL_TIM_Base_Start+0x48>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004412:	d009      	beq.n	8004428 <HAL_TIM_Base_Start+0x48>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a14      	ldr	r2, [pc, #80]	; (800446c <HAL_TIM_Base_Start+0x8c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_TIM_Base_Start+0x48>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a13      	ldr	r2, [pc, #76]	; (8004470 <HAL_TIM_Base_Start+0x90>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d111      	bne.n	800444c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b06      	cmp	r3, #6
 8004438:	d010      	beq.n	800445c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444a:	e007      	b.n	800445c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr
 8004468:	40012c00 	.word	0x40012c00
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800

08004474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_TIM_ConfigClockSource+0x1c>
 800448c:	2302      	movs	r3, #2
 800448e:	e0b4      	b.n	80045fa <HAL_TIM_ConfigClockSource+0x186>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044c8:	d03e      	beq.n	8004548 <HAL_TIM_ConfigClockSource+0xd4>
 80044ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ce:	f200 8087 	bhi.w	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d6:	f000 8086 	beq.w	80045e6 <HAL_TIM_ConfigClockSource+0x172>
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044de:	d87f      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 80044e0:	2b70      	cmp	r3, #112	; 0x70
 80044e2:	d01a      	beq.n	800451a <HAL_TIM_ConfigClockSource+0xa6>
 80044e4:	2b70      	cmp	r3, #112	; 0x70
 80044e6:	d87b      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 80044e8:	2b60      	cmp	r3, #96	; 0x60
 80044ea:	d050      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x11a>
 80044ec:	2b60      	cmp	r3, #96	; 0x60
 80044ee:	d877      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 80044f0:	2b50      	cmp	r3, #80	; 0x50
 80044f2:	d03c      	beq.n	800456e <HAL_TIM_ConfigClockSource+0xfa>
 80044f4:	2b50      	cmp	r3, #80	; 0x50
 80044f6:	d873      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d058      	beq.n	80045ae <HAL_TIM_ConfigClockSource+0x13a>
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	d86f      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004500:	2b30      	cmp	r3, #48	; 0x30
 8004502:	d064      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x15a>
 8004504:	2b30      	cmp	r3, #48	; 0x30
 8004506:	d86b      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004508:	2b20      	cmp	r3, #32
 800450a:	d060      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x15a>
 800450c:	2b20      	cmp	r3, #32
 800450e:	d867      	bhi.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d05c      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x15a>
 8004514:	2b10      	cmp	r3, #16
 8004516:	d05a      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x15a>
 8004518:	e062      	b.n	80045e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800452a:	f000 f944 	bl	80047b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800453c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	609a      	str	r2, [r3, #8]
      break;
 8004546:	e04f      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004558:	f000 f92d 	bl	80047b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800456a:	609a      	str	r2, [r3, #8]
      break;
 800456c:	e03c      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800457a:	461a      	mov	r2, r3
 800457c:	f000 f8a4 	bl	80046c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2150      	movs	r1, #80	; 0x50
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f8fb 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 800458c:	e02c      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800459a:	461a      	mov	r2, r3
 800459c:	f000 f8c2 	bl	8004724 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2160      	movs	r1, #96	; 0x60
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f8eb 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 80045ac:	e01c      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ba:	461a      	mov	r2, r3
 80045bc:	f000 f884 	bl	80046c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2140      	movs	r1, #64	; 0x40
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f8db 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 80045cc:	e00c      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4619      	mov	r1, r3
 80045d8:	4610      	mov	r0, r2
 80045da:	f000 f8d2 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 80045de:	e003      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
      break;
 80045e4:	e000      	b.n	80045e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a29      	ldr	r2, [pc, #164]	; (80046bc <TIM_Base_SetConfig+0xb8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_Base_SetConfig+0x30>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d007      	beq.n	8004634 <TIM_Base_SetConfig+0x30>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <TIM_Base_SetConfig+0xbc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0x30>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a25      	ldr	r2, [pc, #148]	; (80046c4 <TIM_Base_SetConfig+0xc0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <TIM_Base_SetConfig+0xb8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00b      	beq.n	8004666 <TIM_Base_SetConfig+0x62>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d007      	beq.n	8004666 <TIM_Base_SetConfig+0x62>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <TIM_Base_SetConfig+0xbc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_Base_SetConfig+0x62>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <TIM_Base_SetConfig+0xc0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d108      	bne.n	8004678 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a07      	ldr	r2, [pc, #28]	; (80046bc <TIM_Base_SetConfig+0xb8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d103      	bne.n	80046ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	615a      	str	r2, [r3, #20]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800

080046c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0201 	bic.w	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f023 030a 	bic.w	r3, r3, #10
 8004704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f023 0210 	bic.w	r2, r3, #16
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800474e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	031b      	lsls	r3, r3, #12
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004760:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	621a      	str	r2, [r3, #32]
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr

08004782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004782:	b480      	push	{r7}
 8004784:	b085      	sub	sp, #20
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	f043 0307 	orr.w	r3, r3, #7
 80047a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	609a      	str	r2, [r3, #8]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b087      	sub	sp, #28
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	431a      	orrs	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4313      	orrs	r3, r2
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	609a      	str	r2, [r3, #8]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004808:	2302      	movs	r3, #2
 800480a:	e046      	b.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d009      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a10      	ldr	r2, [pc, #64]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10c      	bne.n	8004888 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4313      	orrs	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800

080048b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e042      	b.n	8004948 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc fc50 	bl	800117c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	; 0x24
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f91d 	bl	8004b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68da      	ldr	r2, [r3, #12]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	; 0x28
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b20      	cmp	r3, #32
 800496e:	d16d      	bne.n	8004a4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_UART_Transmit+0x2c>
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e066      	b.n	8004a4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2221      	movs	r2, #33	; 0x21
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498e:	f7fc fd37 	bl	8001400 <HAL_GetTick>
 8004992:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	88fa      	ldrh	r2, [r7, #6]
 800499e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a8:	d108      	bne.n	80049bc <HAL_UART_Transmit+0x6c>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	e003      	b.n	80049c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049c4:	e02a      	b.n	8004a1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2180      	movs	r1, #128	; 0x80
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f840 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e036      	b.n	8004a4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10b      	bne.n	80049fe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	3302      	adds	r3, #2
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	e007      	b.n	8004a0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1cf      	bne.n	80049c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2140      	movs	r1, #64	; 0x40
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f810 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e006      	b.n	8004a4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e000      	b.n	8004a4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004a4c:	2302      	movs	r3, #2
  }
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b090      	sub	sp, #64	; 0x40
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a66:	e050      	b.n	8004b0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d04c      	beq.n	8004b0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d007      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a76:	f7fc fcc3 	bl	8001400 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d241      	bcs.n	8004b0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	330c      	adds	r3, #12
 8004a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004aa6:	637a      	str	r2, [r7, #52]	; 0x34
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e5      	bne.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ada:	623a      	str	r2, [r7, #32]
 8004adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	69f9      	ldr	r1, [r7, #28]
 8004ae0:	6a3a      	ldr	r2, [r7, #32]
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e5      	bne.n	8004aba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e00f      	b.n	8004b2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4013      	ands	r3, r2
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	bf0c      	ite	eq
 8004b1a:	2301      	moveq	r3, #1
 8004b1c:	2300      	movne	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d09f      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3740      	adds	r7, #64	; 0x40
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b6e:	f023 030c 	bic.w	r3, r3, #12
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a2c      	ldr	r2, [pc, #176]	; (8004c48 <UART_SetConfig+0x114>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d103      	bne.n	8004ba4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b9c:	f7ff fa32 	bl	8004004 <HAL_RCC_GetPCLK2Freq>
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	e002      	b.n	8004baa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004ba4:	f7ff fa1a 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8004ba8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009a      	lsls	r2, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	4a22      	ldr	r2, [pc, #136]	; (8004c4c <UART_SetConfig+0x118>)
 8004bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	0119      	lsls	r1, r3, #4
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009a      	lsls	r2, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004be0:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <UART_SetConfig+0x118>)
 8004be2:	fba3 0302 	umull	r0, r3, r3, r2
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	2064      	movs	r0, #100	; 0x64
 8004bea:	fb00 f303 	mul.w	r3, r0, r3
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	3332      	adds	r3, #50	; 0x32
 8004bf4:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <UART_SetConfig+0x118>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c00:	4419      	add	r1, r3
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	009a      	lsls	r2, r3, #2
 8004c0c:	441a      	add	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <UART_SetConfig+0x118>)
 8004c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	2064      	movs	r0, #100	; 0x64
 8004c22:	fb00 f303 	mul.w	r3, r0, r3
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	3332      	adds	r3, #50	; 0x32
 8004c2c:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <UART_SetConfig+0x118>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	f003 020f 	and.w	r2, r3, #15
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40013800 	.word	0x40013800
 8004c4c:	51eb851f 	.word	0x51eb851f

08004c50 <sniprintf>:
 8004c50:	b40c      	push	{r2, r3}
 8004c52:	b530      	push	{r4, r5, lr}
 8004c54:	4b17      	ldr	r3, [pc, #92]	; (8004cb4 <sniprintf+0x64>)
 8004c56:	1e0c      	subs	r4, r1, #0
 8004c58:	681d      	ldr	r5, [r3, #0]
 8004c5a:	b09d      	sub	sp, #116	; 0x74
 8004c5c:	da08      	bge.n	8004c70 <sniprintf+0x20>
 8004c5e:	238b      	movs	r3, #139	; 0x8b
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	602b      	str	r3, [r5, #0]
 8004c66:	b01d      	add	sp, #116	; 0x74
 8004c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c6c:	b002      	add	sp, #8
 8004c6e:	4770      	bx	lr
 8004c70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004c74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004c78:	bf0c      	ite	eq
 8004c7a:	4623      	moveq	r3, r4
 8004c7c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004c80:	9304      	str	r3, [sp, #16]
 8004c82:	9307      	str	r3, [sp, #28]
 8004c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c88:	9002      	str	r0, [sp, #8]
 8004c8a:	9006      	str	r0, [sp, #24]
 8004c8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c90:	4628      	mov	r0, r5
 8004c92:	ab21      	add	r3, sp, #132	; 0x84
 8004c94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c96:	a902      	add	r1, sp, #8
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	f000 f98f 	bl	8004fbc <_svfiprintf_r>
 8004c9e:	1c43      	adds	r3, r0, #1
 8004ca0:	bfbc      	itt	lt
 8004ca2:	238b      	movlt	r3, #139	; 0x8b
 8004ca4:	602b      	strlt	r3, [r5, #0]
 8004ca6:	2c00      	cmp	r4, #0
 8004ca8:	d0dd      	beq.n	8004c66 <sniprintf+0x16>
 8004caa:	2200      	movs	r2, #0
 8004cac:	9b02      	ldr	r3, [sp, #8]
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	e7d9      	b.n	8004c66 <sniprintf+0x16>
 8004cb2:	bf00      	nop
 8004cb4:	20000058 	.word	0x20000058

08004cb8 <memset>:
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4402      	add	r2, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <__errno>:
 8004cc8:	4b01      	ldr	r3, [pc, #4]	; (8004cd0 <__errno+0x8>)
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000058 	.word	0x20000058

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	4d0c      	ldr	r5, [pc, #48]	; (8004d0c <__libc_init_array+0x38>)
 8004cda:	4c0d      	ldr	r4, [pc, #52]	; (8004d10 <__libc_init_array+0x3c>)
 8004cdc:	1b64      	subs	r4, r4, r5
 8004cde:	10a4      	asrs	r4, r4, #2
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	f000 fc7a 	bl	80055dc <_init>
 8004ce8:	2600      	movs	r6, #0
 8004cea:	4d0a      	ldr	r5, [pc, #40]	; (8004d14 <__libc_init_array+0x40>)
 8004cec:	4c0a      	ldr	r4, [pc, #40]	; (8004d18 <__libc_init_array+0x44>)
 8004cee:	1b64      	subs	r4, r4, r5
 8004cf0:	10a4      	asrs	r4, r4, #2
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08005684 	.word	0x08005684
 8004d10:	08005684 	.word	0x08005684
 8004d14:	08005684 	.word	0x08005684
 8004d18:	08005688 	.word	0x08005688

08004d1c <__retarget_lock_acquire_recursive>:
 8004d1c:	4770      	bx	lr

08004d1e <__retarget_lock_release_recursive>:
 8004d1e:	4770      	bx	lr

08004d20 <_free_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4605      	mov	r5, r0
 8004d24:	2900      	cmp	r1, #0
 8004d26:	d040      	beq.n	8004daa <_free_r+0x8a>
 8004d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d2c:	1f0c      	subs	r4, r1, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bfb8      	it	lt
 8004d32:	18e4      	addlt	r4, r4, r3
 8004d34:	f000 f8dc 	bl	8004ef0 <__malloc_lock>
 8004d38:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <_free_r+0x8c>)
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	b933      	cbnz	r3, 8004d4c <_free_r+0x2c>
 8004d3e:	6063      	str	r3, [r4, #4]
 8004d40:	6014      	str	r4, [r2, #0]
 8004d42:	4628      	mov	r0, r5
 8004d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d48:	f000 b8d8 	b.w	8004efc <__malloc_unlock>
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	d908      	bls.n	8004d62 <_free_r+0x42>
 8004d50:	6820      	ldr	r0, [r4, #0]
 8004d52:	1821      	adds	r1, r4, r0
 8004d54:	428b      	cmp	r3, r1
 8004d56:	bf01      	itttt	eq
 8004d58:	6819      	ldreq	r1, [r3, #0]
 8004d5a:	685b      	ldreq	r3, [r3, #4]
 8004d5c:	1809      	addeq	r1, r1, r0
 8004d5e:	6021      	streq	r1, [r4, #0]
 8004d60:	e7ed      	b.n	8004d3e <_free_r+0x1e>
 8004d62:	461a      	mov	r2, r3
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b10b      	cbz	r3, 8004d6c <_free_r+0x4c>
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	d9fa      	bls.n	8004d62 <_free_r+0x42>
 8004d6c:	6811      	ldr	r1, [r2, #0]
 8004d6e:	1850      	adds	r0, r2, r1
 8004d70:	42a0      	cmp	r0, r4
 8004d72:	d10b      	bne.n	8004d8c <_free_r+0x6c>
 8004d74:	6820      	ldr	r0, [r4, #0]
 8004d76:	4401      	add	r1, r0
 8004d78:	1850      	adds	r0, r2, r1
 8004d7a:	4283      	cmp	r3, r0
 8004d7c:	6011      	str	r1, [r2, #0]
 8004d7e:	d1e0      	bne.n	8004d42 <_free_r+0x22>
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4408      	add	r0, r1
 8004d86:	6010      	str	r0, [r2, #0]
 8004d88:	6053      	str	r3, [r2, #4]
 8004d8a:	e7da      	b.n	8004d42 <_free_r+0x22>
 8004d8c:	d902      	bls.n	8004d94 <_free_r+0x74>
 8004d8e:	230c      	movs	r3, #12
 8004d90:	602b      	str	r3, [r5, #0]
 8004d92:	e7d6      	b.n	8004d42 <_free_r+0x22>
 8004d94:	6820      	ldr	r0, [r4, #0]
 8004d96:	1821      	adds	r1, r4, r0
 8004d98:	428b      	cmp	r3, r1
 8004d9a:	bf01      	itttt	eq
 8004d9c:	6819      	ldreq	r1, [r3, #0]
 8004d9e:	685b      	ldreq	r3, [r3, #4]
 8004da0:	1809      	addeq	r1, r1, r0
 8004da2:	6021      	streq	r1, [r4, #0]
 8004da4:	6063      	str	r3, [r4, #4]
 8004da6:	6054      	str	r4, [r2, #4]
 8004da8:	e7cb      	b.n	8004d42 <_free_r+0x22>
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	20000358 	.word	0x20000358

08004db0 <sbrk_aligned>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4e0e      	ldr	r6, [pc, #56]	; (8004dec <sbrk_aligned+0x3c>)
 8004db4:	460c      	mov	r4, r1
 8004db6:	6831      	ldr	r1, [r6, #0]
 8004db8:	4605      	mov	r5, r0
 8004dba:	b911      	cbnz	r1, 8004dc2 <sbrk_aligned+0x12>
 8004dbc:	f000 fbaa 	bl	8005514 <_sbrk_r>
 8004dc0:	6030      	str	r0, [r6, #0]
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f000 fba5 	bl	8005514 <_sbrk_r>
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	d00a      	beq.n	8004de4 <sbrk_aligned+0x34>
 8004dce:	1cc4      	adds	r4, r0, #3
 8004dd0:	f024 0403 	bic.w	r4, r4, #3
 8004dd4:	42a0      	cmp	r0, r4
 8004dd6:	d007      	beq.n	8004de8 <sbrk_aligned+0x38>
 8004dd8:	1a21      	subs	r1, r4, r0
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f000 fb9a 	bl	8005514 <_sbrk_r>
 8004de0:	3001      	adds	r0, #1
 8004de2:	d101      	bne.n	8004de8 <sbrk_aligned+0x38>
 8004de4:	f04f 34ff 	mov.w	r4, #4294967295
 8004de8:	4620      	mov	r0, r4
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	2000035c 	.word	0x2000035c

08004df0 <_malloc_r>:
 8004df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004df4:	1ccd      	adds	r5, r1, #3
 8004df6:	f025 0503 	bic.w	r5, r5, #3
 8004dfa:	3508      	adds	r5, #8
 8004dfc:	2d0c      	cmp	r5, #12
 8004dfe:	bf38      	it	cc
 8004e00:	250c      	movcc	r5, #12
 8004e02:	2d00      	cmp	r5, #0
 8004e04:	4607      	mov	r7, r0
 8004e06:	db01      	blt.n	8004e0c <_malloc_r+0x1c>
 8004e08:	42a9      	cmp	r1, r5
 8004e0a:	d905      	bls.n	8004e18 <_malloc_r+0x28>
 8004e0c:	230c      	movs	r3, #12
 8004e0e:	2600      	movs	r6, #0
 8004e10:	603b      	str	r3, [r7, #0]
 8004e12:	4630      	mov	r0, r6
 8004e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004eec <_malloc_r+0xfc>
 8004e1c:	f000 f868 	bl	8004ef0 <__malloc_lock>
 8004e20:	f8d8 3000 	ldr.w	r3, [r8]
 8004e24:	461c      	mov	r4, r3
 8004e26:	bb5c      	cbnz	r4, 8004e80 <_malloc_r+0x90>
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f7ff ffc0 	bl	8004db0 <sbrk_aligned>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	4604      	mov	r4, r0
 8004e34:	d155      	bne.n	8004ee2 <_malloc_r+0xf2>
 8004e36:	f8d8 4000 	ldr.w	r4, [r8]
 8004e3a:	4626      	mov	r6, r4
 8004e3c:	2e00      	cmp	r6, #0
 8004e3e:	d145      	bne.n	8004ecc <_malloc_r+0xdc>
 8004e40:	2c00      	cmp	r4, #0
 8004e42:	d048      	beq.n	8004ed6 <_malloc_r+0xe6>
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	4631      	mov	r1, r6
 8004e48:	4638      	mov	r0, r7
 8004e4a:	eb04 0903 	add.w	r9, r4, r3
 8004e4e:	f000 fb61 	bl	8005514 <_sbrk_r>
 8004e52:	4581      	cmp	r9, r0
 8004e54:	d13f      	bne.n	8004ed6 <_malloc_r+0xe6>
 8004e56:	6821      	ldr	r1, [r4, #0]
 8004e58:	4638      	mov	r0, r7
 8004e5a:	1a6d      	subs	r5, r5, r1
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	f7ff ffa7 	bl	8004db0 <sbrk_aligned>
 8004e62:	3001      	adds	r0, #1
 8004e64:	d037      	beq.n	8004ed6 <_malloc_r+0xe6>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	442b      	add	r3, r5
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d038      	beq.n	8004ee6 <_malloc_r+0xf6>
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	42a2      	cmp	r2, r4
 8004e78:	d12b      	bne.n	8004ed2 <_malloc_r+0xe2>
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
 8004e7e:	e00f      	b.n	8004ea0 <_malloc_r+0xb0>
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	1b52      	subs	r2, r2, r5
 8004e84:	d41f      	bmi.n	8004ec6 <_malloc_r+0xd6>
 8004e86:	2a0b      	cmp	r2, #11
 8004e88:	d917      	bls.n	8004eba <_malloc_r+0xca>
 8004e8a:	1961      	adds	r1, r4, r5
 8004e8c:	42a3      	cmp	r3, r4
 8004e8e:	6025      	str	r5, [r4, #0]
 8004e90:	bf18      	it	ne
 8004e92:	6059      	strne	r1, [r3, #4]
 8004e94:	6863      	ldr	r3, [r4, #4]
 8004e96:	bf08      	it	eq
 8004e98:	f8c8 1000 	streq.w	r1, [r8]
 8004e9c:	5162      	str	r2, [r4, r5]
 8004e9e:	604b      	str	r3, [r1, #4]
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	f104 060b 	add.w	r6, r4, #11
 8004ea6:	f000 f829 	bl	8004efc <__malloc_unlock>
 8004eaa:	f026 0607 	bic.w	r6, r6, #7
 8004eae:	1d23      	adds	r3, r4, #4
 8004eb0:	1af2      	subs	r2, r6, r3
 8004eb2:	d0ae      	beq.n	8004e12 <_malloc_r+0x22>
 8004eb4:	1b9b      	subs	r3, r3, r6
 8004eb6:	50a3      	str	r3, [r4, r2]
 8004eb8:	e7ab      	b.n	8004e12 <_malloc_r+0x22>
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	6862      	ldr	r2, [r4, #4]
 8004ebe:	d1dd      	bne.n	8004e7c <_malloc_r+0x8c>
 8004ec0:	f8c8 2000 	str.w	r2, [r8]
 8004ec4:	e7ec      	b.n	8004ea0 <_malloc_r+0xb0>
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	6864      	ldr	r4, [r4, #4]
 8004eca:	e7ac      	b.n	8004e26 <_malloc_r+0x36>
 8004ecc:	4634      	mov	r4, r6
 8004ece:	6876      	ldr	r6, [r6, #4]
 8004ed0:	e7b4      	b.n	8004e3c <_malloc_r+0x4c>
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	e7cc      	b.n	8004e70 <_malloc_r+0x80>
 8004ed6:	230c      	movs	r3, #12
 8004ed8:	4638      	mov	r0, r7
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	f000 f80e 	bl	8004efc <__malloc_unlock>
 8004ee0:	e797      	b.n	8004e12 <_malloc_r+0x22>
 8004ee2:	6025      	str	r5, [r4, #0]
 8004ee4:	e7dc      	b.n	8004ea0 <_malloc_r+0xb0>
 8004ee6:	605b      	str	r3, [r3, #4]
 8004ee8:	deff      	udf	#255	; 0xff
 8004eea:	bf00      	nop
 8004eec:	20000358 	.word	0x20000358

08004ef0 <__malloc_lock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__malloc_lock+0x8>)
 8004ef2:	f7ff bf13 	b.w	8004d1c <__retarget_lock_acquire_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	20000354 	.word	0x20000354

08004efc <__malloc_unlock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__malloc_unlock+0x8>)
 8004efe:	f7ff bf0e 	b.w	8004d1e <__retarget_lock_release_recursive>
 8004f02:	bf00      	nop
 8004f04:	20000354 	.word	0x20000354

08004f08 <__ssputs_r>:
 8004f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f0c:	461f      	mov	r7, r3
 8004f0e:	688e      	ldr	r6, [r1, #8]
 8004f10:	4682      	mov	sl, r0
 8004f12:	42be      	cmp	r6, r7
 8004f14:	460c      	mov	r4, r1
 8004f16:	4690      	mov	r8, r2
 8004f18:	680b      	ldr	r3, [r1, #0]
 8004f1a:	d82c      	bhi.n	8004f76 <__ssputs_r+0x6e>
 8004f1c:	898a      	ldrh	r2, [r1, #12]
 8004f1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f22:	d026      	beq.n	8004f72 <__ssputs_r+0x6a>
 8004f24:	6965      	ldr	r5, [r4, #20]
 8004f26:	6909      	ldr	r1, [r1, #16]
 8004f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f2c:	eba3 0901 	sub.w	r9, r3, r1
 8004f30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f34:	1c7b      	adds	r3, r7, #1
 8004f36:	444b      	add	r3, r9
 8004f38:	106d      	asrs	r5, r5, #1
 8004f3a:	429d      	cmp	r5, r3
 8004f3c:	bf38      	it	cc
 8004f3e:	461d      	movcc	r5, r3
 8004f40:	0553      	lsls	r3, r2, #21
 8004f42:	d527      	bpl.n	8004f94 <__ssputs_r+0x8c>
 8004f44:	4629      	mov	r1, r5
 8004f46:	f7ff ff53 	bl	8004df0 <_malloc_r>
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	b360      	cbz	r0, 8004fa8 <__ssputs_r+0xa0>
 8004f4e:	464a      	mov	r2, r9
 8004f50:	6921      	ldr	r1, [r4, #16]
 8004f52:	f000 fafd 	bl	8005550 <memcpy>
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	81a3      	strh	r3, [r4, #12]
 8004f62:	6126      	str	r6, [r4, #16]
 8004f64:	444e      	add	r6, r9
 8004f66:	6026      	str	r6, [r4, #0]
 8004f68:	463e      	mov	r6, r7
 8004f6a:	6165      	str	r5, [r4, #20]
 8004f6c:	eba5 0509 	sub.w	r5, r5, r9
 8004f70:	60a5      	str	r5, [r4, #8]
 8004f72:	42be      	cmp	r6, r7
 8004f74:	d900      	bls.n	8004f78 <__ssputs_r+0x70>
 8004f76:	463e      	mov	r6, r7
 8004f78:	4632      	mov	r2, r6
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	6820      	ldr	r0, [r4, #0]
 8004f7e:	f000 faaf 	bl	80054e0 <memmove>
 8004f82:	2000      	movs	r0, #0
 8004f84:	68a3      	ldr	r3, [r4, #8]
 8004f86:	1b9b      	subs	r3, r3, r6
 8004f88:	60a3      	str	r3, [r4, #8]
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	4433      	add	r3, r6
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f94:	462a      	mov	r2, r5
 8004f96:	f000 fae9 	bl	800556c <_realloc_r>
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d1e0      	bne.n	8004f62 <__ssputs_r+0x5a>
 8004fa0:	4650      	mov	r0, sl
 8004fa2:	6921      	ldr	r1, [r4, #16]
 8004fa4:	f7ff febc 	bl	8004d20 <_free_r>
 8004fa8:	230c      	movs	r3, #12
 8004faa:	f8ca 3000 	str.w	r3, [sl]
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	e7e9      	b.n	8004f90 <__ssputs_r+0x88>

08004fbc <_svfiprintf_r>:
 8004fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc0:	4698      	mov	r8, r3
 8004fc2:	898b      	ldrh	r3, [r1, #12]
 8004fc4:	4607      	mov	r7, r0
 8004fc6:	061b      	lsls	r3, r3, #24
 8004fc8:	460d      	mov	r5, r1
 8004fca:	4614      	mov	r4, r2
 8004fcc:	b09d      	sub	sp, #116	; 0x74
 8004fce:	d50e      	bpl.n	8004fee <_svfiprintf_r+0x32>
 8004fd0:	690b      	ldr	r3, [r1, #16]
 8004fd2:	b963      	cbnz	r3, 8004fee <_svfiprintf_r+0x32>
 8004fd4:	2140      	movs	r1, #64	; 0x40
 8004fd6:	f7ff ff0b 	bl	8004df0 <_malloc_r>
 8004fda:	6028      	str	r0, [r5, #0]
 8004fdc:	6128      	str	r0, [r5, #16]
 8004fde:	b920      	cbnz	r0, 8004fea <_svfiprintf_r+0x2e>
 8004fe0:	230c      	movs	r3, #12
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe8:	e0d0      	b.n	800518c <_svfiprintf_r+0x1d0>
 8004fea:	2340      	movs	r3, #64	; 0x40
 8004fec:	616b      	str	r3, [r5, #20]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ff8:	2330      	movs	r3, #48	; 0x30
 8004ffa:	f04f 0901 	mov.w	r9, #1
 8004ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005002:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80051a4 <_svfiprintf_r+0x1e8>
 8005006:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800500a:	4623      	mov	r3, r4
 800500c:	469a      	mov	sl, r3
 800500e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005012:	b10a      	cbz	r2, 8005018 <_svfiprintf_r+0x5c>
 8005014:	2a25      	cmp	r2, #37	; 0x25
 8005016:	d1f9      	bne.n	800500c <_svfiprintf_r+0x50>
 8005018:	ebba 0b04 	subs.w	fp, sl, r4
 800501c:	d00b      	beq.n	8005036 <_svfiprintf_r+0x7a>
 800501e:	465b      	mov	r3, fp
 8005020:	4622      	mov	r2, r4
 8005022:	4629      	mov	r1, r5
 8005024:	4638      	mov	r0, r7
 8005026:	f7ff ff6f 	bl	8004f08 <__ssputs_r>
 800502a:	3001      	adds	r0, #1
 800502c:	f000 80a9 	beq.w	8005182 <_svfiprintf_r+0x1c6>
 8005030:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005032:	445a      	add	r2, fp
 8005034:	9209      	str	r2, [sp, #36]	; 0x24
 8005036:	f89a 3000 	ldrb.w	r3, [sl]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80a1 	beq.w	8005182 <_svfiprintf_r+0x1c6>
 8005040:	2300      	movs	r3, #0
 8005042:	f04f 32ff 	mov.w	r2, #4294967295
 8005046:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800504a:	f10a 0a01 	add.w	sl, sl, #1
 800504e:	9304      	str	r3, [sp, #16]
 8005050:	9307      	str	r3, [sp, #28]
 8005052:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005056:	931a      	str	r3, [sp, #104]	; 0x68
 8005058:	4654      	mov	r4, sl
 800505a:	2205      	movs	r2, #5
 800505c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005060:	4850      	ldr	r0, [pc, #320]	; (80051a4 <_svfiprintf_r+0x1e8>)
 8005062:	f000 fa67 	bl	8005534 <memchr>
 8005066:	9a04      	ldr	r2, [sp, #16]
 8005068:	b9d8      	cbnz	r0, 80050a2 <_svfiprintf_r+0xe6>
 800506a:	06d0      	lsls	r0, r2, #27
 800506c:	bf44      	itt	mi
 800506e:	2320      	movmi	r3, #32
 8005070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005074:	0711      	lsls	r1, r2, #28
 8005076:	bf44      	itt	mi
 8005078:	232b      	movmi	r3, #43	; 0x2b
 800507a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800507e:	f89a 3000 	ldrb.w	r3, [sl]
 8005082:	2b2a      	cmp	r3, #42	; 0x2a
 8005084:	d015      	beq.n	80050b2 <_svfiprintf_r+0xf6>
 8005086:	4654      	mov	r4, sl
 8005088:	2000      	movs	r0, #0
 800508a:	f04f 0c0a 	mov.w	ip, #10
 800508e:	9a07      	ldr	r2, [sp, #28]
 8005090:	4621      	mov	r1, r4
 8005092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005096:	3b30      	subs	r3, #48	; 0x30
 8005098:	2b09      	cmp	r3, #9
 800509a:	d94d      	bls.n	8005138 <_svfiprintf_r+0x17c>
 800509c:	b1b0      	cbz	r0, 80050cc <_svfiprintf_r+0x110>
 800509e:	9207      	str	r2, [sp, #28]
 80050a0:	e014      	b.n	80050cc <_svfiprintf_r+0x110>
 80050a2:	eba0 0308 	sub.w	r3, r0, r8
 80050a6:	fa09 f303 	lsl.w	r3, r9, r3
 80050aa:	4313      	orrs	r3, r2
 80050ac:	46a2      	mov	sl, r4
 80050ae:	9304      	str	r3, [sp, #16]
 80050b0:	e7d2      	b.n	8005058 <_svfiprintf_r+0x9c>
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	1d19      	adds	r1, r3, #4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	9103      	str	r1, [sp, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bfbb      	ittet	lt
 80050be:	425b      	neglt	r3, r3
 80050c0:	f042 0202 	orrlt.w	r2, r2, #2
 80050c4:	9307      	strge	r3, [sp, #28]
 80050c6:	9307      	strlt	r3, [sp, #28]
 80050c8:	bfb8      	it	lt
 80050ca:	9204      	strlt	r2, [sp, #16]
 80050cc:	7823      	ldrb	r3, [r4, #0]
 80050ce:	2b2e      	cmp	r3, #46	; 0x2e
 80050d0:	d10c      	bne.n	80050ec <_svfiprintf_r+0x130>
 80050d2:	7863      	ldrb	r3, [r4, #1]
 80050d4:	2b2a      	cmp	r3, #42	; 0x2a
 80050d6:	d134      	bne.n	8005142 <_svfiprintf_r+0x186>
 80050d8:	9b03      	ldr	r3, [sp, #12]
 80050da:	3402      	adds	r4, #2
 80050dc:	1d1a      	adds	r2, r3, #4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	9203      	str	r2, [sp, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bfb8      	it	lt
 80050e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80050ea:	9305      	str	r3, [sp, #20]
 80050ec:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80051a8 <_svfiprintf_r+0x1ec>
 80050f0:	2203      	movs	r2, #3
 80050f2:	4650      	mov	r0, sl
 80050f4:	7821      	ldrb	r1, [r4, #0]
 80050f6:	f000 fa1d 	bl	8005534 <memchr>
 80050fa:	b138      	cbz	r0, 800510c <_svfiprintf_r+0x150>
 80050fc:	2240      	movs	r2, #64	; 0x40
 80050fe:	9b04      	ldr	r3, [sp, #16]
 8005100:	eba0 000a 	sub.w	r0, r0, sl
 8005104:	4082      	lsls	r2, r0
 8005106:	4313      	orrs	r3, r2
 8005108:	3401      	adds	r4, #1
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005110:	2206      	movs	r2, #6
 8005112:	4826      	ldr	r0, [pc, #152]	; (80051ac <_svfiprintf_r+0x1f0>)
 8005114:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005118:	f000 fa0c 	bl	8005534 <memchr>
 800511c:	2800      	cmp	r0, #0
 800511e:	d038      	beq.n	8005192 <_svfiprintf_r+0x1d6>
 8005120:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <_svfiprintf_r+0x1f4>)
 8005122:	bb1b      	cbnz	r3, 800516c <_svfiprintf_r+0x1b0>
 8005124:	9b03      	ldr	r3, [sp, #12]
 8005126:	3307      	adds	r3, #7
 8005128:	f023 0307 	bic.w	r3, r3, #7
 800512c:	3308      	adds	r3, #8
 800512e:	9303      	str	r3, [sp, #12]
 8005130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005132:	4433      	add	r3, r6
 8005134:	9309      	str	r3, [sp, #36]	; 0x24
 8005136:	e768      	b.n	800500a <_svfiprintf_r+0x4e>
 8005138:	460c      	mov	r4, r1
 800513a:	2001      	movs	r0, #1
 800513c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005140:	e7a6      	b.n	8005090 <_svfiprintf_r+0xd4>
 8005142:	2300      	movs	r3, #0
 8005144:	f04f 0c0a 	mov.w	ip, #10
 8005148:	4619      	mov	r1, r3
 800514a:	3401      	adds	r4, #1
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	4620      	mov	r0, r4
 8005150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005154:	3a30      	subs	r2, #48	; 0x30
 8005156:	2a09      	cmp	r2, #9
 8005158:	d903      	bls.n	8005162 <_svfiprintf_r+0x1a6>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0c6      	beq.n	80050ec <_svfiprintf_r+0x130>
 800515e:	9105      	str	r1, [sp, #20]
 8005160:	e7c4      	b.n	80050ec <_svfiprintf_r+0x130>
 8005162:	4604      	mov	r4, r0
 8005164:	2301      	movs	r3, #1
 8005166:	fb0c 2101 	mla	r1, ip, r1, r2
 800516a:	e7f0      	b.n	800514e <_svfiprintf_r+0x192>
 800516c:	ab03      	add	r3, sp, #12
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	462a      	mov	r2, r5
 8005172:	4638      	mov	r0, r7
 8005174:	4b0f      	ldr	r3, [pc, #60]	; (80051b4 <_svfiprintf_r+0x1f8>)
 8005176:	a904      	add	r1, sp, #16
 8005178:	f3af 8000 	nop.w
 800517c:	1c42      	adds	r2, r0, #1
 800517e:	4606      	mov	r6, r0
 8005180:	d1d6      	bne.n	8005130 <_svfiprintf_r+0x174>
 8005182:	89ab      	ldrh	r3, [r5, #12]
 8005184:	065b      	lsls	r3, r3, #25
 8005186:	f53f af2d 	bmi.w	8004fe4 <_svfiprintf_r+0x28>
 800518a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800518c:	b01d      	add	sp, #116	; 0x74
 800518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005192:	ab03      	add	r3, sp, #12
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	462a      	mov	r2, r5
 8005198:	4638      	mov	r0, r7
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <_svfiprintf_r+0x1f8>)
 800519c:	a904      	add	r1, sp, #16
 800519e:	f000 f87d 	bl	800529c <_printf_i>
 80051a2:	e7eb      	b.n	800517c <_svfiprintf_r+0x1c0>
 80051a4:	0800564e 	.word	0x0800564e
 80051a8:	08005654 	.word	0x08005654
 80051ac:	08005658 	.word	0x08005658
 80051b0:	00000000 	.word	0x00000000
 80051b4:	08004f09 	.word	0x08004f09

080051b8 <_printf_common>:
 80051b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051bc:	4616      	mov	r6, r2
 80051be:	4699      	mov	r9, r3
 80051c0:	688a      	ldr	r2, [r1, #8]
 80051c2:	690b      	ldr	r3, [r1, #16]
 80051c4:	4607      	mov	r7, r0
 80051c6:	4293      	cmp	r3, r2
 80051c8:	bfb8      	it	lt
 80051ca:	4613      	movlt	r3, r2
 80051cc:	6033      	str	r3, [r6, #0]
 80051ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051d2:	460c      	mov	r4, r1
 80051d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051d8:	b10a      	cbz	r2, 80051de <_printf_common+0x26>
 80051da:	3301      	adds	r3, #1
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	0699      	lsls	r1, r3, #26
 80051e2:	bf42      	ittt	mi
 80051e4:	6833      	ldrmi	r3, [r6, #0]
 80051e6:	3302      	addmi	r3, #2
 80051e8:	6033      	strmi	r3, [r6, #0]
 80051ea:	6825      	ldr	r5, [r4, #0]
 80051ec:	f015 0506 	ands.w	r5, r5, #6
 80051f0:	d106      	bne.n	8005200 <_printf_common+0x48>
 80051f2:	f104 0a19 	add.w	sl, r4, #25
 80051f6:	68e3      	ldr	r3, [r4, #12]
 80051f8:	6832      	ldr	r2, [r6, #0]
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	42ab      	cmp	r3, r5
 80051fe:	dc2b      	bgt.n	8005258 <_printf_common+0xa0>
 8005200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005204:	1e13      	subs	r3, r2, #0
 8005206:	6822      	ldr	r2, [r4, #0]
 8005208:	bf18      	it	ne
 800520a:	2301      	movne	r3, #1
 800520c:	0692      	lsls	r2, r2, #26
 800520e:	d430      	bmi.n	8005272 <_printf_common+0xba>
 8005210:	4649      	mov	r1, r9
 8005212:	4638      	mov	r0, r7
 8005214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005218:	47c0      	blx	r8
 800521a:	3001      	adds	r0, #1
 800521c:	d023      	beq.n	8005266 <_printf_common+0xae>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	6922      	ldr	r2, [r4, #16]
 8005222:	f003 0306 	and.w	r3, r3, #6
 8005226:	2b04      	cmp	r3, #4
 8005228:	bf14      	ite	ne
 800522a:	2500      	movne	r5, #0
 800522c:	6833      	ldreq	r3, [r6, #0]
 800522e:	f04f 0600 	mov.w	r6, #0
 8005232:	bf08      	it	eq
 8005234:	68e5      	ldreq	r5, [r4, #12]
 8005236:	f104 041a 	add.w	r4, r4, #26
 800523a:	bf08      	it	eq
 800523c:	1aed      	subeq	r5, r5, r3
 800523e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005242:	bf08      	it	eq
 8005244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005248:	4293      	cmp	r3, r2
 800524a:	bfc4      	itt	gt
 800524c:	1a9b      	subgt	r3, r3, r2
 800524e:	18ed      	addgt	r5, r5, r3
 8005250:	42b5      	cmp	r5, r6
 8005252:	d11a      	bne.n	800528a <_printf_common+0xd2>
 8005254:	2000      	movs	r0, #0
 8005256:	e008      	b.n	800526a <_printf_common+0xb2>
 8005258:	2301      	movs	r3, #1
 800525a:	4652      	mov	r2, sl
 800525c:	4649      	mov	r1, r9
 800525e:	4638      	mov	r0, r7
 8005260:	47c0      	blx	r8
 8005262:	3001      	adds	r0, #1
 8005264:	d103      	bne.n	800526e <_printf_common+0xb6>
 8005266:	f04f 30ff 	mov.w	r0, #4294967295
 800526a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526e:	3501      	adds	r5, #1
 8005270:	e7c1      	b.n	80051f6 <_printf_common+0x3e>
 8005272:	2030      	movs	r0, #48	; 0x30
 8005274:	18e1      	adds	r1, r4, r3
 8005276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005280:	4422      	add	r2, r4
 8005282:	3302      	adds	r3, #2
 8005284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005288:	e7c2      	b.n	8005210 <_printf_common+0x58>
 800528a:	2301      	movs	r3, #1
 800528c:	4622      	mov	r2, r4
 800528e:	4649      	mov	r1, r9
 8005290:	4638      	mov	r0, r7
 8005292:	47c0      	blx	r8
 8005294:	3001      	adds	r0, #1
 8005296:	d0e6      	beq.n	8005266 <_printf_common+0xae>
 8005298:	3601      	adds	r6, #1
 800529a:	e7d9      	b.n	8005250 <_printf_common+0x98>

0800529c <_printf_i>:
 800529c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a0:	7e0f      	ldrb	r7, [r1, #24]
 80052a2:	4691      	mov	r9, r2
 80052a4:	2f78      	cmp	r7, #120	; 0x78
 80052a6:	4680      	mov	r8, r0
 80052a8:	460c      	mov	r4, r1
 80052aa:	469a      	mov	sl, r3
 80052ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052b2:	d807      	bhi.n	80052c4 <_printf_i+0x28>
 80052b4:	2f62      	cmp	r7, #98	; 0x62
 80052b6:	d80a      	bhi.n	80052ce <_printf_i+0x32>
 80052b8:	2f00      	cmp	r7, #0
 80052ba:	f000 80d5 	beq.w	8005468 <_printf_i+0x1cc>
 80052be:	2f58      	cmp	r7, #88	; 0x58
 80052c0:	f000 80c1 	beq.w	8005446 <_printf_i+0x1aa>
 80052c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052cc:	e03a      	b.n	8005344 <_printf_i+0xa8>
 80052ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052d2:	2b15      	cmp	r3, #21
 80052d4:	d8f6      	bhi.n	80052c4 <_printf_i+0x28>
 80052d6:	a101      	add	r1, pc, #4	; (adr r1, 80052dc <_printf_i+0x40>)
 80052d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052dc:	08005335 	.word	0x08005335
 80052e0:	08005349 	.word	0x08005349
 80052e4:	080052c5 	.word	0x080052c5
 80052e8:	080052c5 	.word	0x080052c5
 80052ec:	080052c5 	.word	0x080052c5
 80052f0:	080052c5 	.word	0x080052c5
 80052f4:	08005349 	.word	0x08005349
 80052f8:	080052c5 	.word	0x080052c5
 80052fc:	080052c5 	.word	0x080052c5
 8005300:	080052c5 	.word	0x080052c5
 8005304:	080052c5 	.word	0x080052c5
 8005308:	0800544f 	.word	0x0800544f
 800530c:	08005375 	.word	0x08005375
 8005310:	08005409 	.word	0x08005409
 8005314:	080052c5 	.word	0x080052c5
 8005318:	080052c5 	.word	0x080052c5
 800531c:	08005471 	.word	0x08005471
 8005320:	080052c5 	.word	0x080052c5
 8005324:	08005375 	.word	0x08005375
 8005328:	080052c5 	.word	0x080052c5
 800532c:	080052c5 	.word	0x080052c5
 8005330:	08005411 	.word	0x08005411
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	1d1a      	adds	r2, r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	602a      	str	r2, [r5, #0]
 800533c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005344:	2301      	movs	r3, #1
 8005346:	e0a0      	b.n	800548a <_printf_i+0x1ee>
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	682b      	ldr	r3, [r5, #0]
 800534c:	0607      	lsls	r7, r0, #24
 800534e:	f103 0104 	add.w	r1, r3, #4
 8005352:	6029      	str	r1, [r5, #0]
 8005354:	d501      	bpl.n	800535a <_printf_i+0xbe>
 8005356:	681e      	ldr	r6, [r3, #0]
 8005358:	e003      	b.n	8005362 <_printf_i+0xc6>
 800535a:	0646      	lsls	r6, r0, #25
 800535c:	d5fb      	bpl.n	8005356 <_printf_i+0xba>
 800535e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005362:	2e00      	cmp	r6, #0
 8005364:	da03      	bge.n	800536e <_printf_i+0xd2>
 8005366:	232d      	movs	r3, #45	; 0x2d
 8005368:	4276      	negs	r6, r6
 800536a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536e:	230a      	movs	r3, #10
 8005370:	4859      	ldr	r0, [pc, #356]	; (80054d8 <_printf_i+0x23c>)
 8005372:	e012      	b.n	800539a <_printf_i+0xfe>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	6820      	ldr	r0, [r4, #0]
 8005378:	1d19      	adds	r1, r3, #4
 800537a:	6029      	str	r1, [r5, #0]
 800537c:	0605      	lsls	r5, r0, #24
 800537e:	d501      	bpl.n	8005384 <_printf_i+0xe8>
 8005380:	681e      	ldr	r6, [r3, #0]
 8005382:	e002      	b.n	800538a <_printf_i+0xee>
 8005384:	0641      	lsls	r1, r0, #25
 8005386:	d5fb      	bpl.n	8005380 <_printf_i+0xe4>
 8005388:	881e      	ldrh	r6, [r3, #0]
 800538a:	2f6f      	cmp	r7, #111	; 0x6f
 800538c:	bf0c      	ite	eq
 800538e:	2308      	moveq	r3, #8
 8005390:	230a      	movne	r3, #10
 8005392:	4851      	ldr	r0, [pc, #324]	; (80054d8 <_printf_i+0x23c>)
 8005394:	2100      	movs	r1, #0
 8005396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800539a:	6865      	ldr	r5, [r4, #4]
 800539c:	2d00      	cmp	r5, #0
 800539e:	bfa8      	it	ge
 80053a0:	6821      	ldrge	r1, [r4, #0]
 80053a2:	60a5      	str	r5, [r4, #8]
 80053a4:	bfa4      	itt	ge
 80053a6:	f021 0104 	bicge.w	r1, r1, #4
 80053aa:	6021      	strge	r1, [r4, #0]
 80053ac:	b90e      	cbnz	r6, 80053b2 <_printf_i+0x116>
 80053ae:	2d00      	cmp	r5, #0
 80053b0:	d04b      	beq.n	800544a <_printf_i+0x1ae>
 80053b2:	4615      	mov	r5, r2
 80053b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80053b8:	fb03 6711 	mls	r7, r3, r1, r6
 80053bc:	5dc7      	ldrb	r7, [r0, r7]
 80053be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053c2:	4637      	mov	r7, r6
 80053c4:	42bb      	cmp	r3, r7
 80053c6:	460e      	mov	r6, r1
 80053c8:	d9f4      	bls.n	80053b4 <_printf_i+0x118>
 80053ca:	2b08      	cmp	r3, #8
 80053cc:	d10b      	bne.n	80053e6 <_printf_i+0x14a>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	07de      	lsls	r6, r3, #31
 80053d2:	d508      	bpl.n	80053e6 <_printf_i+0x14a>
 80053d4:	6923      	ldr	r3, [r4, #16]
 80053d6:	6861      	ldr	r1, [r4, #4]
 80053d8:	4299      	cmp	r1, r3
 80053da:	bfde      	ittt	le
 80053dc:	2330      	movle	r3, #48	; 0x30
 80053de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053e6:	1b52      	subs	r2, r2, r5
 80053e8:	6122      	str	r2, [r4, #16]
 80053ea:	464b      	mov	r3, r9
 80053ec:	4621      	mov	r1, r4
 80053ee:	4640      	mov	r0, r8
 80053f0:	f8cd a000 	str.w	sl, [sp]
 80053f4:	aa03      	add	r2, sp, #12
 80053f6:	f7ff fedf 	bl	80051b8 <_printf_common>
 80053fa:	3001      	adds	r0, #1
 80053fc:	d14a      	bne.n	8005494 <_printf_i+0x1f8>
 80053fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005402:	b004      	add	sp, #16
 8005404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	f043 0320 	orr.w	r3, r3, #32
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	2778      	movs	r7, #120	; 0x78
 8005412:	4832      	ldr	r0, [pc, #200]	; (80054dc <_printf_i+0x240>)
 8005414:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	6829      	ldr	r1, [r5, #0]
 800541c:	061f      	lsls	r7, r3, #24
 800541e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005422:	d402      	bmi.n	800542a <_printf_i+0x18e>
 8005424:	065f      	lsls	r7, r3, #25
 8005426:	bf48      	it	mi
 8005428:	b2b6      	uxthmi	r6, r6
 800542a:	07df      	lsls	r7, r3, #31
 800542c:	bf48      	it	mi
 800542e:	f043 0320 	orrmi.w	r3, r3, #32
 8005432:	6029      	str	r1, [r5, #0]
 8005434:	bf48      	it	mi
 8005436:	6023      	strmi	r3, [r4, #0]
 8005438:	b91e      	cbnz	r6, 8005442 <_printf_i+0x1a6>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	f023 0320 	bic.w	r3, r3, #32
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	2310      	movs	r3, #16
 8005444:	e7a6      	b.n	8005394 <_printf_i+0xf8>
 8005446:	4824      	ldr	r0, [pc, #144]	; (80054d8 <_printf_i+0x23c>)
 8005448:	e7e4      	b.n	8005414 <_printf_i+0x178>
 800544a:	4615      	mov	r5, r2
 800544c:	e7bd      	b.n	80053ca <_printf_i+0x12e>
 800544e:	682b      	ldr	r3, [r5, #0]
 8005450:	6826      	ldr	r6, [r4, #0]
 8005452:	1d18      	adds	r0, r3, #4
 8005454:	6961      	ldr	r1, [r4, #20]
 8005456:	6028      	str	r0, [r5, #0]
 8005458:	0635      	lsls	r5, r6, #24
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	d501      	bpl.n	8005462 <_printf_i+0x1c6>
 800545e:	6019      	str	r1, [r3, #0]
 8005460:	e002      	b.n	8005468 <_printf_i+0x1cc>
 8005462:	0670      	lsls	r0, r6, #25
 8005464:	d5fb      	bpl.n	800545e <_printf_i+0x1c2>
 8005466:	8019      	strh	r1, [r3, #0]
 8005468:	2300      	movs	r3, #0
 800546a:	4615      	mov	r5, r2
 800546c:	6123      	str	r3, [r4, #16]
 800546e:	e7bc      	b.n	80053ea <_printf_i+0x14e>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	2100      	movs	r1, #0
 8005474:	1d1a      	adds	r2, r3, #4
 8005476:	602a      	str	r2, [r5, #0]
 8005478:	681d      	ldr	r5, [r3, #0]
 800547a:	6862      	ldr	r2, [r4, #4]
 800547c:	4628      	mov	r0, r5
 800547e:	f000 f859 	bl	8005534 <memchr>
 8005482:	b108      	cbz	r0, 8005488 <_printf_i+0x1ec>
 8005484:	1b40      	subs	r0, r0, r5
 8005486:	6060      	str	r0, [r4, #4]
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	2300      	movs	r3, #0
 800548e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005492:	e7aa      	b.n	80053ea <_printf_i+0x14e>
 8005494:	462a      	mov	r2, r5
 8005496:	4649      	mov	r1, r9
 8005498:	4640      	mov	r0, r8
 800549a:	6923      	ldr	r3, [r4, #16]
 800549c:	47d0      	blx	sl
 800549e:	3001      	adds	r0, #1
 80054a0:	d0ad      	beq.n	80053fe <_printf_i+0x162>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	079b      	lsls	r3, r3, #30
 80054a6:	d413      	bmi.n	80054d0 <_printf_i+0x234>
 80054a8:	68e0      	ldr	r0, [r4, #12]
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	4298      	cmp	r0, r3
 80054ae:	bfb8      	it	lt
 80054b0:	4618      	movlt	r0, r3
 80054b2:	e7a6      	b.n	8005402 <_printf_i+0x166>
 80054b4:	2301      	movs	r3, #1
 80054b6:	4632      	mov	r2, r6
 80054b8:	4649      	mov	r1, r9
 80054ba:	4640      	mov	r0, r8
 80054bc:	47d0      	blx	sl
 80054be:	3001      	adds	r0, #1
 80054c0:	d09d      	beq.n	80053fe <_printf_i+0x162>
 80054c2:	3501      	adds	r5, #1
 80054c4:	68e3      	ldr	r3, [r4, #12]
 80054c6:	9903      	ldr	r1, [sp, #12]
 80054c8:	1a5b      	subs	r3, r3, r1
 80054ca:	42ab      	cmp	r3, r5
 80054cc:	dcf2      	bgt.n	80054b4 <_printf_i+0x218>
 80054ce:	e7eb      	b.n	80054a8 <_printf_i+0x20c>
 80054d0:	2500      	movs	r5, #0
 80054d2:	f104 0619 	add.w	r6, r4, #25
 80054d6:	e7f5      	b.n	80054c4 <_printf_i+0x228>
 80054d8:	0800565f 	.word	0x0800565f
 80054dc:	08005670 	.word	0x08005670

080054e0 <memmove>:
 80054e0:	4288      	cmp	r0, r1
 80054e2:	b510      	push	{r4, lr}
 80054e4:	eb01 0402 	add.w	r4, r1, r2
 80054e8:	d902      	bls.n	80054f0 <memmove+0x10>
 80054ea:	4284      	cmp	r4, r0
 80054ec:	4623      	mov	r3, r4
 80054ee:	d807      	bhi.n	8005500 <memmove+0x20>
 80054f0:	1e43      	subs	r3, r0, #1
 80054f2:	42a1      	cmp	r1, r4
 80054f4:	d008      	beq.n	8005508 <memmove+0x28>
 80054f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054fe:	e7f8      	b.n	80054f2 <memmove+0x12>
 8005500:	4601      	mov	r1, r0
 8005502:	4402      	add	r2, r0
 8005504:	428a      	cmp	r2, r1
 8005506:	d100      	bne.n	800550a <memmove+0x2a>
 8005508:	bd10      	pop	{r4, pc}
 800550a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800550e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005512:	e7f7      	b.n	8005504 <memmove+0x24>

08005514 <_sbrk_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	2300      	movs	r3, #0
 8005518:	4d05      	ldr	r5, [pc, #20]	; (8005530 <_sbrk_r+0x1c>)
 800551a:	4604      	mov	r4, r0
 800551c:	4608      	mov	r0, r1
 800551e:	602b      	str	r3, [r5, #0]
 8005520:	f7fb feb4 	bl	800128c <_sbrk>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_sbrk_r+0x1a>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_sbrk_r+0x1a>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	20000350 	.word	0x20000350

08005534 <memchr>:
 8005534:	4603      	mov	r3, r0
 8005536:	b510      	push	{r4, lr}
 8005538:	b2c9      	uxtb	r1, r1
 800553a:	4402      	add	r2, r0
 800553c:	4293      	cmp	r3, r2
 800553e:	4618      	mov	r0, r3
 8005540:	d101      	bne.n	8005546 <memchr+0x12>
 8005542:	2000      	movs	r0, #0
 8005544:	e003      	b.n	800554e <memchr+0x1a>
 8005546:	7804      	ldrb	r4, [r0, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	428c      	cmp	r4, r1
 800554c:	d1f6      	bne.n	800553c <memchr+0x8>
 800554e:	bd10      	pop	{r4, pc}

08005550 <memcpy>:
 8005550:	440a      	add	r2, r1
 8005552:	4291      	cmp	r1, r2
 8005554:	f100 33ff 	add.w	r3, r0, #4294967295
 8005558:	d100      	bne.n	800555c <memcpy+0xc>
 800555a:	4770      	bx	lr
 800555c:	b510      	push	{r4, lr}
 800555e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005562:	4291      	cmp	r1, r2
 8005564:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005568:	d1f9      	bne.n	800555e <memcpy+0xe>
 800556a:	bd10      	pop	{r4, pc}

0800556c <_realloc_r>:
 800556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005570:	4680      	mov	r8, r0
 8005572:	4614      	mov	r4, r2
 8005574:	460e      	mov	r6, r1
 8005576:	b921      	cbnz	r1, 8005582 <_realloc_r+0x16>
 8005578:	4611      	mov	r1, r2
 800557a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800557e:	f7ff bc37 	b.w	8004df0 <_malloc_r>
 8005582:	b92a      	cbnz	r2, 8005590 <_realloc_r+0x24>
 8005584:	f7ff fbcc 	bl	8004d20 <_free_r>
 8005588:	4625      	mov	r5, r4
 800558a:	4628      	mov	r0, r5
 800558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005590:	f000 f81b 	bl	80055ca <_malloc_usable_size_r>
 8005594:	4284      	cmp	r4, r0
 8005596:	4607      	mov	r7, r0
 8005598:	d802      	bhi.n	80055a0 <_realloc_r+0x34>
 800559a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800559e:	d812      	bhi.n	80055c6 <_realloc_r+0x5a>
 80055a0:	4621      	mov	r1, r4
 80055a2:	4640      	mov	r0, r8
 80055a4:	f7ff fc24 	bl	8004df0 <_malloc_r>
 80055a8:	4605      	mov	r5, r0
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d0ed      	beq.n	800558a <_realloc_r+0x1e>
 80055ae:	42bc      	cmp	r4, r7
 80055b0:	4622      	mov	r2, r4
 80055b2:	4631      	mov	r1, r6
 80055b4:	bf28      	it	cs
 80055b6:	463a      	movcs	r2, r7
 80055b8:	f7ff ffca 	bl	8005550 <memcpy>
 80055bc:	4631      	mov	r1, r6
 80055be:	4640      	mov	r0, r8
 80055c0:	f7ff fbae 	bl	8004d20 <_free_r>
 80055c4:	e7e1      	b.n	800558a <_realloc_r+0x1e>
 80055c6:	4635      	mov	r5, r6
 80055c8:	e7df      	b.n	800558a <_realloc_r+0x1e>

080055ca <_malloc_usable_size_r>:
 80055ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ce:	1f18      	subs	r0, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bfbc      	itt	lt
 80055d4:	580b      	ldrlt	r3, [r1, r0]
 80055d6:	18c0      	addlt	r0, r0, r3
 80055d8:	4770      	bx	lr
	...

080055dc <_init>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr

080055e8 <_fini>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr
